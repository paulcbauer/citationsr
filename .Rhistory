folders <- list.files()
for(z in 1:length(folders)){
citation.data <- read.table(paste("./", folders[z], "/documents/citation_cases.csv", sep = ""), sep=",", stringsAsFactors = F)
# STEP 1:  Keep citation cases that match with the year of the respective citation, e.g. 2013
if (length(study.data$year)==1){
cat("\n\nYou defined before that the year of the study is ", study.data$year,". Only cases are pulled out that contain that year.\n\n", sep = "")
} else {
cat("\n\n You probably didn't define 'study.data' because no year was found.\n\n", sep="")
}
citation.data <- citation.data[str_detect(citation.data$citation.case, study.data$year)==TRUE,]
# STEP 2:
# Clean leading dots .
citation.data$citation.case <- str_replace(citation.data$citation.case, "^. ", "")
# Clean trailing dots .
citation.data$citation.case <- str_replace(citation.data$citation.case, ".$", "")
write.table(citation.data, paste("./", folders[z], "/documents/citation_cases_cleaned.csv", sep = ""), sep = ",")
cat("\n\n Cleaned citation data file saved under 'citation_data_cleaned.csv' in the corresponding study folder.\n\n")
}
}
clean_citation_cases()
z <- 1
folders <- list.files()
folders
citation.data <- read.table(paste("./", folders[z], "/documents/citation_cases.csv", sep = ""), sep=",", stringsAsFactors = F)
paste("./", folders[z], "/documents/citation_cases.csv", sep = "")
getwd()
read.table(paste("./", folders[z], "/documents/citation_cases.csv", sep = ""), sep=",", stringsAsFactors = F)
clean_citation_cases <- function(file){
folders <- list.files()
for(z in 1:length(folders)){
citation.data <- read.table(paste("./", folders[z], "/citation_cases.csv", sep = ""), sep=",", stringsAsFactors = F)
# STEP 1:  Keep citation cases that match with the year of the respective citation, e.g. 2013
if (length(study.data$year)==1){
cat("\n\nYou defined before that the year of the study is ", study.data$year,". Only cases are pulled out that contain that year.\n\n", sep = "")
} else {
cat("\n\n You probably didn't define 'study.data' because no year was found.\n\n", sep="")
}
citation.data <- citation.data[str_detect(citation.data$citation.case, study.data$year)==TRUE,]
# STEP 2:
# Clean leading dots .
citation.data$citation.case <- str_replace(citation.data$citation.case, "^. ", "")
# Clean trailing dots .
citation.data$citation.case <- str_replace(citation.data$citation.case, ".$", "")
write.table(citation.data, paste("./", folders[z], "/documents/citation_cases_cleaned.csv", sep = ""), sep = ",")
cat("\n\n Cleaned citation data file saved under 'citation_data_cleaned.csv' in the corresponding study folder.\n\n")
}
}
clean_citation_cases()
clean_citation_cases()
paste("./", folders[z], "/citation_cases.csv", sep = "")
folders[z]
str_extract(folders[z], "[0-9][0-9][0-9][0-9]")
year <- as.numeric(str_extract(folders[z], "[0-9][0-9][0-9][0-9]"))
year
clean_citation_cases <- function(file){
folders <- list.files()
for(z in 1:length(folders)){
citation.data <- read.table(paste("./", folders[z], "/citation_cases.csv", sep = ""), sep=",", stringsAsFactors = F)
# Year pulled out of folder name
year <- as.numeric(str_extract(folders[z], "[0-9][0-9][0-9][0-9]"))
# STEP 1:  Keep citation cases that match with the year of the respective citation, e.g. 2013
if (length(year)==1){
cat("\n\nYou defined before that the year of the study is ", year,". Only cases are pulled out that contain that year.\n\n", sep = "")
} else {
cat("\n\n You probably didn't define 'study.data' because no year was found.\n\n", sep="")
}
citation.data <- citation.data[str_detect(citation.data$citation.case, year)==TRUE,]
# STEP 2:
# Clean leading dots .
citation.data$citation.case <- str_replace(citation.data$citation.case, "^. ", "")
# Clean trailing dots .
citation.data$citation.case <- str_replace(citation.data$citation.case, ".$", "")
write.table(citation.data, paste("./", folders[z], "/documents/citation_cases_cleaned.csv", sep = ""), sep = ",")
cat("\n\n Cleaned citation data file saved under 'citation_data_cleaned.csv' in the corresponding study folder.\n\n")
}
}
clean_citation_cases()
z <- 1
citation.data <- read.table(paste("./", folders[z], "/citation_cases.csv", sep = ""), sep=",", stringsAsFactors = F)
folders <- list.files()
citation.data <- read.table(paste("./", folders[z], "/citation_cases.csv", sep = ""), sep=",", stringsAsFactors = F)
year <- as.numeric(str_extract(folders[z], "[0-9][0-9][0-9][0-9]"))
if (length(year)==1){
cat("\n\nYou defined before that the year of the study is ", year,". Only cases are pulled out that contain that year.\n\n", sep = "")
} else {
cat("\n\n You probably didn't define 'study.data' because no year was found.\n\n", sep="")
}
citation.data <- citation.data[str_detect(citation.data$citation.case, year)==TRUE,]
citation.data$citation.case
citation.data <- citation.data[str_detect(citation.data$citation.case, as.character(year))==TRUE,]
citation.data$citation.case <- str_replace(citation.data$citation.case, "^. ", "")
citation.data$citation.case <- str_replace(citation.data$citation.case, ".$", "")
write.table(citation.data, paste("./", folders[z], "/documents/citation_cases_cleaned.csv", sep = ""), sep = ",")
cat("\n\n Cleaned citation data file saved under 'citation_data_cleaned.csv' in the corresponding study folder.\n\n")
clean_citation_cases <- function(file){
folders <- list.files()
for(z in 1:length(folders)){
citation.data <- read.table(paste("./", folders[z], "/citation_cases.csv", sep = ""), sep=",", stringsAsFactors = F)
# Year pulled out of folder name
year <- as.numeric(str_extract(folders[z], "[0-9][0-9][0-9][0-9]"))
# STEP 1:  Keep citation cases that match with the year of the respective citation, e.g. 2013
if (length(year)==1){
cat("\n\nYou defined before that the year of the study is ", year,". Only cases are pulled out that contain that year.\n\n", sep = "")
} else {
cat("\n\n You probably didn't define 'study.data' because no year was found.\n\n", sep="")
}
citation.data <- citation.data[str_detect(citation.data$citation.case, as.character(year))==TRUE,]
# STEP 2:
# Clean leading dots .
citation.data$citation.case <- str_replace(citation.data$citation.case, "^. ", "")
# Clean trailing dots .
citation.data$citation.case <- str_replace(citation.data$citation.case, ".$", "")
write.table(citation.data, paste("./", folders[z], "/documents/citation_cases_cleaned.csv", sep = ""), sep = ",")
cat("\n\n Cleaned citation data file saved under 'citation_data_cleaned.csv' in the corresponding study folder.\n\n")
}
}
clean_citation_cases()
clean_citation_cases <- function(file){
folders <- list.files()
for(z in 1:length(folders)){
citation.data <- read.table(paste("./", folders[z], "/citation_cases.csv", sep = ""), sep=",", stringsAsFactors = F)
# Year pulled out of folder name
year <- as.numeric(str_extract(folders[z], "[0-9][0-9][0-9][0-9]"))
# STEP 1:  Keep citation cases that match with the year of the respective citation, e.g. 2013
if (length(year)==1){
cat("\n\nYou defined before that the year of the study is ", year,". Only cases are pulled out that contain that year.\n\n", sep = "")
} else {
cat("\n\n You probably didn't define 'study.data' because no year was found.\n\n", sep="")
}
citation.data <- citation.data[str_detect(citation.data$citation.case, as.character(year))==TRUE,]
# STEP 2:
# Clean leading dots .
citation.data$citation.case <- str_replace(citation.data$citation.case, "^. ", "")
# Clean trailing dots .
citation.data$citation.case <- str_replace(citation.data$citation.case, ".$", "")
write.table(citation.data, paste("./", folders[z], "/citation_cases_cleaned.csv", sep = ""), sep = ",")
cat("\n\n Cleaned citation data file saved under 'citation_data_cleaned.csv' in the corresponding study folder.\n\n")
}
}
clean_citation_cases()
library(citations)
library(devtools)
library(citations)
library(citations)
?substr
library(citations)
library(citations)
?get_wos_citations
?xpathSApply
library(XML)
?xpathSApply
library(citations)
R.version
library(citations)
?xmlValue
??xmlValue
??doc
library(citations)
library(citations)
XML::xpathSApply
?xpathSApply
library(citations)
library(citations)
??xmlValue
library(citations)
library(citations)
library(citations)
library(citations)
library(citations)
library(citations)
library(citations)
devtools::test()
library(testthat)
library(citations)
test_check("citations")
library(citations)
ls("package:citations")
library(citations)
install.packages("roxygen2")
install.packages("testhat")
install.packages("testthat")
library(citations)
setwd("C:\\Users\\pbauer\\Google Drive\\Packages\\citations - example")
library(XML)
library(stringr)
library(fulltext)
studies <- study_data(authors="Druckman, James N., Erik Peterson, and Rune Slothuus",
title = "How elite partisan polarization affects public opinion formation",
year="2013",
journal="American Political Science Review",
volume="107",
issue="1",
pages="57-79")
library(citations)
library(citations)
library(devtools)
install.packages("devtools")
library(citations)
setwd("C:\\Users\\pbauer\\Google Drive\\Packages\\citations - example")
library(citations)
studies <- study_data(authors="Druckman, James N., Erik Peterson, and Rune Slothuus",
title = "How elite partisan polarization affects public opinion formation",
year="2013",
journal="American Political Science Review",
volume="107",
issue="1",
pages="57-79")
setwd("C:\\Users\\pbauer\\Google Drive\\Packages\\citations - example")
count_wos_citations(wos.url = "https://apps.webofknowledge.com/full_record.do?product=WOS&search_mode=CitingArticles&qid=11&SID=T1K4ltqYAZBpobmxVZ5&page=1&doc=1")
count_wos_citations(wos.url = "https://apps.webofknowledge.com/full_record.do?product=WOS&search_mode=CitingArticles&qid=11&SID=T1K4ltqYAZBpobmxVZ5&page=1&doc=1")
library(XML)
library(stringr)
library(fulltext)
count_wos_citations(wos.url = "https://apps.webofknowledge.com/full_record.do?product=WOS&search_mode=CitingArticles&qid=11&SID=T1K4ltqYAZBpobmxVZ5&page=1&doc=1")
count_wos_citations(wos.url = "https://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=13&SID=T1K4ltqYAZBpobmxVZ5&page=1&doc=1")
get_wos_citations(wos.url = "https://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=13&SID=T1K4ltqYAZBpobmxVZ5&page=1&doc=1",
n.pages = 1)
get_wos_citations(wos.url = "https://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=13&SID=T1K4ltqYAZBpobmxVZ5&page=1&doc=1",
n.pages = 3,
folder = "Beck 1995")
wos.url = "https://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=13&SID=T1K4ltqYAZBpobmxVZ5&page=1&doc=1"
n.pages = 3
folder = "Beck 1995"
URL <- wos.url
cat("\nYou are using the following URL: ", paste(URL, sep = ""))
doc <- XML::htmlParse(URL) # , encoding="UTF-8" - ATTENTION UTF does not work on WINDOWS 7
records.max <- stringr::str_extract(stringr::str_replace(XML::xpathSApply(doc, "//*[@id='paginationForm']", fun = XML::xmlValue), "1", "")[1], "[0-9]+")
records.max
doc <- htmlParse(URL) # , encoding="UTF-8" - ATTENTION UTF does not work on WINDOWS 7
count_wos_citations(wos.url = "http://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=13&SID=T1K4ltqYAZBpobmxVZ5&page=1&doc=1")
count_wos_citations(wos.url = "http://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=13&SID=T1K4ltqYAZBpobmxVZ5&page=1&doc=1")
get_wos_citations(wos.url = "https://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=13&SID=T1K4ltqYAZBpobmxVZ5&page=1&doc=1",
n.pages = 3,
folder = "Beck 1995")
get_wos_citations(wos.url = "http://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=13&SID=T1K4ltqYAZBpobmxVZ5&page=1&doc=1",
n.pages = 3,
folder = "Beck 1995")
count_wos_citations(wos.url = "http://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=24&SID=T1K4ltqYAZBpobmxVZ5&page=1&doc=1")
URL <- wos.url
cat("\nYou are using the following URL: ", paste(URL, sep = ""))
wos.url = "http://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=13&SID=T1K4ltqYAZBpobmxVZ5&page=1&doc=1"
URL <- wos.url
cat("\nYou are using the following URL: ", paste(URL, sep = ""))
doc <- htmlParse(URL) # , encoding="UTF-8" - ATTENTION UTF does not work on WINDOWS 7
records.max <- stringr::str_extract(stringr::str_replace(XML::xpathSApply(doc, "//*[@id='paginationForm']", fun = XML::xmlValue), "1", "")[1], "[0-9]+")
records.max
doc
records.max <- stringr::str_extract(stringr::str_replace(XML::xpathSApply(doc, "//*[@id='paginationForm']", fun = XML::xmlValue), "1", "")[1], "[0-9]+")
records.max <- stringr::str_extract(stringr::str_replace(XML::xpathSApply(doc, "//*[@id='paginationForm']", fun = xmlValue), "1", "")[1], "[0-9]+")
records.max
stringr::str_extract(stringr::str_replace(XML::xpathSApply(doc, "//*[@id='paginationForm']", fun = XML::xmlValue), "1", "")[1], "[0-9]+")
stringr::str_extract(stringr::str_replace(XML::xpathSApply(doc, "//*[@id='paginationForm']", fun = XML::xmlValue), "1", "")[1], "[0-9]+")
XML::xpathSApply(doc, "//*[@id='paginationForm']", fun = XML::xmlValue)
stringr::str_replace(XML::xpathSApply(doc, "//*[@id='paginationForm']", fun = XML::xmlValue), "1", "")
stringr::str_replace(XML::xpathSApply(doc, "//*[@id='paginationForm']", fun = XML::xmlValue), "1", "")[1]
records.max <- stringr::str_extract(stringr::str_replace(XML::xpathSApply(doc, "//*[@id='paginationForm']", fun = XML::xmlValue), "1", "(?<!\S)(\d*\.?\d+|\d{1,3}(,\d{3})*(\.\d+)?)(?!\S)")[1], "")
records.max <- stringr::str_extract(stringr::str_replace(XML::xpathSApply(doc, "//*[@id='paginationForm']", fun = XML::xmlValue), "1", "")[1], "[0-9,]+")
records.max
records.max <- stringr::str_replace(XML::xpathSApply(doc, "//*[@id='paginationForm']", fun = XML::xmlValue), "1", "")[1]
records.max
records.max <- stringr::str_extract(records.max, "[0-9,]+")
records.max
records.max <- stringr::str_replace(records.max, ",", "")
records.max
library(citations)
count_wos_citations(wos.url = "http://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=24&SID=T1K4ltqYAZBpobmxVZ5&page=1&doc=1")
getwd()
get_wos_citations(wos.url = "http://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=13&SID=T1K4ltqYAZBpobmxVZ5&page=1&doc=1",
n.pages = 1567,
folder = "Beck 1995")
getwd()
gen_ris()
fetch_paperpiledocs(paperpile.directory = "C:\\Users\\pbauer\\Google Drive\\Paperpile\\")
library(citations)
fetch_paperpiledocs(paperpile.directory = "C:\\Users\\pbauer\\Google Drive\\Paperpile\\")
setwd("C:\\Users\\pbauer\\Google Drive\\Packages\\citations package example\\data")
fetch_paperpiledocs(paperpile.directory = "C:\\Users\\pbauer\\Google Drive\\Paperpile\\")
extract_text()
extract_text()
extract_text()
extract_text()
extract_text()
extract_text()
extract_text()
extract_text()
extract_text()
extract_text()
library(citations)
library(citations)
setwd("C:\\Users\\paul\\Google Drive\\Packages\\citations package example\\data")
library(citations)
extract_text()
extract_text()
extract_text()
extract_text()
extract_text()
extract_text()
extract_text()
extract_text()
extract_text()
extract_text()
extract_text()
extract_text()
extract_text()
setwd("C:\\Users\\paul\\Google Drive\\Research\\2016_Quality_of_citations\\Analysis\\data")
library(citations)
extract_text()
clean_text()
warnings
warnings()
delete_reference_section()
extract_text()
clean_text()
delete_reference_section()
delete_reference_section()
delete_reference_section()
extract_citation_cases()
extract_text()
# Clean texts
clean_text()
# Identify wether document containts study
# identify_study(study.title = "How elite partisan polarization affects public opinion formation")
# does only work for one folder/study so far... needs list of titles
# Delete  reference section from texts
delete_reference_section()
# Extract citation cases
extract_citation_cases()
clean_citation_cases()
z <- 1
folders <- list.files()
folders
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""), pattern = "cleaned_woref.txt")
file.names
file.paths <- paste(paste("./", folders[z], "/documents/", sep = ""), file.names, sep="")
file.paths
all.docs.cit.cases <- NULL
for (i in 1:length(file.paths)){ # 4 DOES NOT WORK!
x <- readLines(file.paths[i])
x <- paste(x, collapse = " ")
cit.cases.doc.i <- stringr::str_extract_all(x, "\\.[^.]*Druckman[^.]*\\.")
all.docs.cit.cases[i] <- cit.cases.doc.i
}
all.docs.cit.cases
folders[z]
str_extract(folders[z], "[:alpha:]")
library(stringr)
str_extract(folders[z], "[:alpha:]")
str_extract(folders[z], "[:alpha:]*")
stringr::str_extract(folders[z], "[:alpha:]*")
authorname <- stringr::str_extract(folders[z], "[:alpha:]*")
authorname
paste("\\.[^.]*", authorname, "[^.]*\\.", sep = "")
library(citations)
setwd("C:\\Users\\paul\\Google Drive\\Research\\2016_Quality_of_citations\\Analysis\\data")
library(citations)
extract_text()
# Clean texts
clean_text()
# Identify wether document containts study
# identify_study(study.title = "How elite partisan polarization affects public opinion formation")
# does only work for one folder/study so far... needs list of titles
# Delete  reference section from texts
delete_reference_section()
# Extract citation cases
extract_citation_cases()
# Clean citation cases
clean_citation_cases()
# Install xpdf into folder C:\Program Files\xpdf
extract_text()
# Clean texts
clean_text()
# Identify wether document containts study
# identify_study(study.title = "How elite partisan polarization affects public opinion formation")
# does only work for one folder/study so far... needs list of titles
# Delete  reference section from texts
delete_reference_section()
# Extract citation cases
extract_citation_cases()
# Clean citation cases
clean_citation_cases()
library(citations)
?count_wos_citations
library(citations)
library(citations)
?count_wos_citations
?get_wos_citations
dir()
library(citations)
library(citations)
library(citations)
unlink
gen_ris
library(citations)
library(citations)
gen_ris
setwd("C:\\Users\\paul\\Google Drive\\Research\\2016_Quality_of_citations\\Analysis\\data")
library(citations)
gen_ris()
folders <- list.files()
folders
folders <- list.files()
z <- 1
citations <- read.table(paste(folders[z], "/citations.csv", sep=""), header=TRUE, stringsAsFactors = F)
# Delete ris folder if there is one from previous runs
unlink(paste(folders[z], "/ris/", sep = ""))
?unlink
unlink(paste(folders[z], "/ris/", sep = ""), recursive = T)
paste(folders[z], "/ris/", sep = "")
unlink(paste(folders[z], "/ris", sep = ""), recursive = T)
unlink(paste(folders[z], "/ris", sep = ""), recursive = F)
unlink(paste(folders[z], "/ris", sep = ""), recursive = F)
unlink(paste(folders[z], "/ris/", sep = ""), recursive = F)
unlink(paste(folders[z], "/ris", sep = ""), recursive = T)
file.remove(paste(folders[z], "/ris", sep = ""), recursive = T)
unlink(paste(folders[z], "/ris", sep = ""), recursive = T)
unlink(paste(folders[z], "/ris/", sep = ""), recursive = T)
setwd("C:\\Users\\paul\\Google Drive\\Research\\2016_Quality_of_citations\\Analysis\\data")
unlink(paste(folders[z], "/ris/", sep = ""), recursive = T)
unlink(paste(folders[z], "/ris/", sep = ""), recursive = T, force = T)
folders <- list.files()
folders
z <- 1
unlink(paste(folders[z], "/ris/", sep = ""), recursive = T, force = T)
unlink(paste(folders[z], "/ris/", sep = ""), recursive = T, force = T)
dir.create(paste(folders[z], "/ris/", sep = ""))
?dir.exists
dir.create
?dir.create
?dir.exists
dir.exists(paste(folders[z], "/ris/", sep = ""))
library(citations)
gen_ris
gen_ris()
folders <- list.files()
folders
z <- 1
dir.exists(paste(folders[z], "/documents/", sep = ""))==FALSE
dir.exists(paste(folders[z], "/documents/", sep = ""))==TRUE
unlink(paste(folders[z], "/ris/", sep = ""))
paste(folders[z]
)
getwd()
working.directory <- getwd()
if(dir.exists(paste(folders[z], "/documents/", sep = ""))==TRUE){
unlink(paste(folders[z], "/documents/", sep = ""))}
dir.exists(paste(folders[z], "/documents/", sep = ""))==TRUE
paste(folders[z], "/documents/", sep = "")
if(dir.exists(paste(folders[z], "/documents/", sep = ""))==TRUE){
unlink(paste(folders[z], "/documents/", sep = ""), recursive = T)}
z <- 1
if(dir.exists(paste(folders[z], "/documents/", sep = ""))==TRUE){
unlink(paste(folders[z], "/documents/", sep = ""), recursive = T)}
paste(working.directory, folders[z], "/documents/", sep = "")
if(dir.exists(paste(folders[z], "/documents/", sep = ""))==TRUE){
unlink(paste(folders[z], "/documents", sep = ""), recursive = T)}
library(citations)
fetch_paperpiledocs
library(citations)
fetch_paperpiledocs
fetch_paperpiledocs(paperpile.directory = "C:\\Users\\paul\\Google Drive\\Paperpile\\")
setwd("C:\\Users\\paul\\Google Drive\\Research\\2016_Quality_of_citations\\Analysis\\data")
get_wos_citations(wos.url = "https://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=3&SID=S1AdAe6DeCTIvuSazDC&page=1&doc=1",
n.pages = 1152,
folder = "Fearon 2003")
library(XML)
library(stringr)
library(fulltext)
library(citations)
get_wos_citations(wos.url = "https://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=3&SID=S1AdAe6DeCTIvuSazDC&page=1&doc=1",
n.pages = 1152,
folder = "Fearon 2003")
#' Scrape citations from the web of knowledge.
#'
#' @param wos.url Follow the steps below to get the url.
#' on the first citation of the study.
#' @param n.pages Number of pages you would like to scrape.
#' @param folder Name the folder in which citations are saved.
#' @return Returns a file 'citations.csv' with all the scraped citations of that particular study.
#' #' @section Steps to follow:
#' 1. Search for study in WOS.
#'
#' 2. Click on the "times cited" link on the right.
#'
#' 3. Click on the first result in the list.
#'
#' 4. Copy the link out of the adress line in the browser and insert that into the function.
#   Build and Reload Package:  'Ctrl + Shift + B'
#   Check Package:             'Ctrl + Shift + E'
#   Test Package:              'Ctrl + Shift + T'
# Url: "http://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=3&SID=Z23xuqBbwEKhrQTYEwM&page=1&doc=1"
get_wos_citations <- function(wos.url, n.pages, folder) {
URL <- wos.url
library(citations)
get_wos_citations
URL <- https://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=3&SID=S1AdAe6DeCTIvuSazDC&page=1&doc=1
URL <- "https://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=3&SID=S1AdAe6DeCTIvuSazDC&page=1&doc=1"
URL <- wos.url
cat("\nYou are using the following URL: ", paste(URL, sep = ""))
doc <- htmlParse(URL) # , encoding="UTF-8" - ATTENTION UTF does not work on WINDOWS 7
doc
library(XML)
URL <- "https://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=3&SID=S1AdAe6DeCTIvuSazDC&page=1&doc=1"
cat("\nYou are using the following URL: ", paste(URL, sep = ""))
# Get the first page
doc <- htmlParse(URL) # , encoding="UTF-8" - ATTENTION UTF does not work on WINDOWS 7
get_wos_citations(wos.url = "http://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=3&SID=S1AdAe6DeCTIvuSazDC&page=1&doc=1",
n.pages = 1152,
folder = "Fearon 2003")
get_wos_citations(wos.url = "http://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=878&SID=S1AdAe6DeCTIvuSazDC&page=1&doc=1",
n.pages = 172,
folder = "Mueller 1987")
gen_ris()
