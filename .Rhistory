}
i <- 10
i <- 20
x <- readLines(file.paths[i])
# Replace abbreviations in text with full words
# et al. -> AND OTHERS
# No. -> NUMBER
# e.g. -> FOR EXAMPLE
# obs. -> OBSERVATIONS
# var. -> VARIANCE
# fig. -> FIGURE
# 0.82 -> 0,82
x <- stringr::str_replace_all(x, "et al\\.", "AND OTHERS")
x <- stringr::str_replace_all(x, "e\\.g\\.", "FOR EXAMPLE")
x <- stringr::str_replace_all(x, "No\\.", "NUMBER")
x <- stringr::str_replace_all(x, "fig\\.", "FIGURE")
x <- stringr::str_replace_all(x, "obs\\.", "OBSERVATIONS")
# Replace citation of interest with original name (NOT NECESSARY)
# x <- stringr::str_replace_all(x, "Glaeser AND OTHERS", "Glaeser et al.")
# Get rid of em-dashes - QUESTION WHICH COMPUTER YOU USE
# x <- iconv(x, "", "ASCII", "byte")
# x <- stringr::str_replace_all(x, "<c2><ad><e2><80><93>", "-")
# x <- iconv(x, "", "UTF-8")
fileConn<-file(paste("./", folders[z], "/documents/", substr(file.names[i], 1, nchar(file.names[i])-4), "_cleaned.txt", sep=""))
writeLines(x, fileConn)
close(fileConn)
fileConn
paste("./", folders[z], "/documents/", substr(file.names[i], 1, nchar(file.names[i])-4), "_cleaned.txt", sep="")
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""), pattern = ".pdf")
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""), pattern = ".txt")
# Generate individual paths to each file
file.paths <- paste(paste("./", folders[z], "/documents/", sep = ""), file.names, sep="")
x <- readLines(file.paths[i])
# Replace abbreviations in text with full words
# et al. -> AND OTHERS
# No. -> NUMBER
# e.g. -> FOR EXAMPLE
# obs. -> OBSERVATIONS
# var. -> VARIANCE
# fig. -> FIGURE
# 0.82 -> 0,82
x <- stringr::str_replace_all(x, "et al\\.", "AND OTHERS")
x <- stringr::str_replace_all(x, "e\\.g\\.", "FOR EXAMPLE")
x <- stringr::str_replace_all(x, "No\\.", "NUMBER")
x <- stringr::str_replace_all(x, "fig\\.", "FIGURE")
x <- stringr::str_replace_all(x, "obs\\.", "OBSERVATIONS")
# Replace citation of interest with original name (NOT NECESSARY)
# x <- stringr::str_replace_all(x, "Glaeser AND OTHERS", "Glaeser et al.")
# Get rid of em-dashes - QUESTION WHICH COMPUTER YOU USE
# x <- iconv(x, "", "ASCII", "byte")
# x <- stringr::str_replace_all(x, "<c2><ad><e2><80><93>", "-")
# x <- iconv(x, "", "UTF-8")
fileConn<-file(paste("./", folders[z], "/documents/", substr(file.names[i], 1, nchar(file.names[i])-4), "_cleaned.txt", sep=""))
writeLines(x, fileConn)
close(fileConn)
}
i <- 20
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""), pattern = ".txt")
# Generate individual paths to each file
file.paths <- paste(paste("./", folders[z], "/documents/", sep = ""), file.names, sep="")
file.paths
i <- 40
x <- readLines(file.paths[i])
# Replace abbreviations in text with full words
# et al. -> AND OTHERS
# No. -> NUMBER
# e.g. -> FOR EXAMPLE
# obs. -> OBSERVATIONS
# var. -> VARIANCE
# fig. -> FIGURE
# 0.82 -> 0,82
x <- stringr::str_replace_all(x, "et al\\.", "AND OTHERS")
x <- stringr::str_replace_all(x, "e\\.g\\.", "FOR EXAMPLE")
x <- stringr::str_replace_all(x, "No\\.", "NUMBER")
x <- stringr::str_replace_all(x, "fig\\.", "FIGURE")
x <- stringr::str_replace_all(x, "obs\\.", "OBSERVATIONS")
# Replace citation of interest with original name (NOT NECESSARY)
# x <- stringr::str_replace_all(x, "Glaeser AND OTHERS", "Glaeser et al.")
# Get rid of em-dashes - QUESTION WHICH COMPUTER YOU USE
# x <- iconv(x, "", "ASCII", "byte")
# x <- stringr::str_replace_all(x, "<c2><ad><e2><80><93>", "-")
# x <- iconv(x, "", "UTF-8")
fileConn<-file(paste("./", folders[z], "/documents/", substr(file.names[i], 1, nchar(file.names[i])-4), "_cleaned.txt", sep=""))
writeLines(x, fileConn)
close(fileConn)
library(citations)
clean_text()
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""))
file.names
folders <- list.files()
folders
clean_filenames <- function(){
# Specify folders, i.e. studies
folders <- list.files()
for(z in 1:length(folders)){
# Identify files
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""))
# REPLACE uncommon stuff in filenames '
for(i in 1:length(file.names)){
if(str_detect(file.names[i], "…")==TRUE){
file.rename(paste("/", folders[z], "/documents/", file.names[i], sep = "")
, str_replace(paste("/", folders[z], "/documents/", file.names[i], sep = ""), "…", ""))
}
if(str_detect(file.names[i], "  ")==TRUE){
file.rename(paste("/", folders[z], "/documents/", file.names[i], sep = "")
, str_replace(paste("/", folders[z], "/documents/", file.names[i], sep = ""), "  ", " "))
}
if(str_detect(file.names[i], "  ")==TRUE){
file.rename(paste("/", folders[z], "/documents/", file.names[i], sep = "")
, str_replace(paste("/", folders[z], "/documents/", file.names[i], sep = ""), "  ", " "))
}
if(str_detect(file.names[i], "\\.\\.\\.")==TRUE){
file.rename(paste("/", folders[z], "/documents/", file.names[i], sep = "")
, str_replace(paste("/", folders[z], "/documents/", file.names[i], sep = ""), "\\.\\.\\.", ""))
}
if(str_detect(file.names[i], "\\.\\.\\.")==TRUE){
file.rename(paste("/", folders[z], "/documents/", file.names[i], sep = "")
, str_replace(paste("/", folders[z], "/documents/", file.names[i], sep = ""), "\\.\\.\\.", ""))
}
if(str_detect(file.names[i], "—")==TRUE){
file.rename(paste("/", folders[z], "/documents/", file.names[i], sep = "")
, str_replace(paste("/", folders[z], "/documents/", file.names[i], sep = ""), "—", ""))
}
if(str_detect(file.names[i], "’")==TRUE){
file.rename(paste("/", folders[z], "/documents/", file.names[i], sep = "")
, str_replace(paste("/", folders[z], "/documents/", file.names[i], sep = ""), "’", ""))
}
}}}
clean_filenames()
clean_filenames()
setwd("C:\\Users\\paul\\Google Drive\\Research\\2016_Quality_of_citations\\Analysis\\data")
library(citations)
clean_filenames()
folders <- list.files()
folders
z <- 1
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""))
file.names
file.names[1:40]
for(i in 1:20){ # length(file.names)
if(str_detect(file.names[i], "…")==TRUE){
file.rename(paste("/", folders[z], "/documents/", file.names[i], sep = "")
, str_replace(paste("/", folders[z], "/documents/", file.names[i], sep = ""), "…", ""))
}
if(str_detect(file.names[i], "  ")==TRUE){
file.rename(paste("/", folders[z], "/documents/", file.names[i], sep = "")
, str_replace(paste("/", folders[z], "/documents/", file.names[i], sep = ""), "  ", " "))
}
if(str_detect(file.names[i], "  ")==TRUE){
file.rename(paste("/", folders[z], "/documents/", file.names[i], sep = "")
, str_replace(paste("/", folders[z], "/documents/", file.names[i], sep = ""), "  ", " "))
}
if(str_detect(file.names[i], "\\.\\.\\.")==TRUE){
file.rename(paste("/", folders[z], "/documents/", file.names[i], sep = "")
, str_replace(paste("/", folders[z], "/documents/", file.names[i], sep = ""), "\\.\\.\\.", ""))
}
if(str_detect(file.names[i], "\\.\\.\\.")==TRUE){
file.rename(paste("/", folders[z], "/documents/", file.names[i], sep = "")
, str_replace(paste("/", folders[z], "/documents/", file.names[i], sep = ""), "\\.\\.\\.", ""))
}
if(str_detect(file.names[i], "—")==TRUE){
file.rename(paste("/", folders[z], "/documents/", file.names[i], sep = "")
, str_replace(paste("/", folders[z], "/documents/", file.names[i], sep = ""), "—", ""))
}
if(str_detect(file.names[i], "'")==TRUE){
file.rename(paste("/", folders[z], "/documents/", file.names[i], sep = "")
, str_replace(paste("/", folders[z], "/documents/", file.names[i], sep = ""), "’", ""))
}
}
paste("/", folders[z], "/documents/", file.names[i], sep = "")
str_replace(paste("/", folders[z], "/documents/", file.names[i], sep = "")
gsub("^ *|(?<= ) | *$", "", paste("/", folders[z], "/documents/", file.names[i], sep = ""), perl = TRUE)
library(opm)
install.packages("opm")
library(opm)
library(citations)
library(XML)
library(stringr)
library(fulltext)
library(opm)
library(citations)
setwd("C:\\Users\\paul\\Google Drive\\Research\\2016_Quality_of_citations\\Analysis\\data")
extract_text()
clean_text()
delete_reference_section()
delete_reference_section <- function(){
folders <- list.files()
for(z in 1:length(folders)){
# Delete files with "cleaned" in name if there are any from before
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""), pattern = "_woref.txt")
if(identical(file.names, character(0))==FALSE){
file.paths <- paste(paste("./", folders[z], "/documents/", sep = ""), file.names, sep="")
file.remove(file.paths)
}
# List file names
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""), pattern = "cleaned.txt")
# Generate individual paths to each file
file.paths <- paste(paste("./", folders[z], "/documents/", sep = ""), file.names, sep="")
#
list.extracted.titles <- NULL
for (i in 1:length(file.paths)){
x <- readLines(file.paths[i])
# Locate "References" section
references.location <- grep("References|REFERENCES", x, ignore.case = FALSE)
# ERROR MESSAGE
if (length(references.location)==1){
print("'References' only appears once. Everything fine with discarding the reference sections.")
# Save text file without references
fileConn<-file(paste("./", folders[z], "/documents/", substr(file.names[i], 1, nchar(file.names[i])-4), "_woref.txt", sep=""))
writeLines(x, fileConn)
close(fileConn)
} else {
cat("\nScotty we have a problem with the references in the following study:\n\n", file.paths[i], sep="")
# Create folder for bad PDFs (if not present)
if(dir.exists(paste("./", folders[z], "/documents/error-references/", sep = ""))==F){
dir.create(paste("./", folders[z], "/documents/error-references/", sep = ""))}
# Copy bad PDFs to error folder
file.copy(file.paths[i], paste("./", folders[z], "/error-references/", file.names[i], sep = ""), overwrite = TRUE, recursive = FALSE,
copy.mode = TRUE, copy.date = FALSE)
# Delete bad PDFs from documents folder
unlink(file.paths[i], force = T)
message("\n\nText file copied to error-references folder.\n")
}
# x <- x[1:references.location-1]
}
}
}
delete_reference_section()
delete_reference_section <- function(){
folders <- list.files()
for(z in 1:length(folders)){
# Delete files with "cleaned" in name if there are any from before
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""), pattern = "_woref.txt")
if(identical(file.names, character(0))==FALSE){
file.paths <- paste(paste("./", folders[z], "/documents/", sep = ""), file.names, sep="")
file.remove(file.paths)
}
# List file names
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""), pattern = "cleaned.txt")
# Generate individual paths to each file
file.paths <- paste(paste("./", folders[z], "/documents/", sep = ""), file.names, sep="")
#
list.extracted.titles <- NULL
for (i in 1:length(file.paths)){
x <- readLines(file.paths[i])
# Locate "References" section
references.location <- grep("References|REFERENCES", x, ignore.case = FALSE)
# ERROR MESSAGE
if (length(references.location)==1){
print("'References' only appears once. Everything fine with discarding the reference sections.")
# Save text file without references
fileConn<-file(paste("./", folders[z], "/documents/", substr(file.names[i], 1, nchar(file.names[i])-4), "_woref.txt", sep=""))
writeLines(x, fileConn)
close(fileConn)
} else {
cat("\nScotty we have a problem with the references in the following study:\n\n", file.paths[i], sep="")
# Create folder for texts where references are not identifiable
if(dir.exists(paste("./", folders[z], "/documents/error-references/", sep = ""))==F){
dir.create(paste("./", folders[z], "/documents/error-references/", sep = ""))}
# Copy those text files in folder
file.copy(file.paths[i], paste("./", folders[z], "/documents/error-references/", file.names[i], sep = ""), overwrite = TRUE, recursive = FALSE,
copy.mode = TRUE, copy.date = FALSE)
# Delete bad PDFs from documents folder
unlink(file.paths[i], force = T)
message("\n\nText file copied to error-references folder.\n")
}
# x <- x[1:references.location-1]
}
}
}
delete_reference_section()
i
file.paths[i]
paste("./", folders[z], "/documents/error-references/", file.names[i], sep = "")
z <- 1
folders <- list.files()
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""), pattern = "_woref.txt")
if(identical(file.names, character(0))==FALSE){
file.paths <- paste(paste("./", folders[z], "/documents/", sep = ""), file.names, sep="")
file.remove(file.paths)
}
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""), pattern = "cleaned.txt")
file.paths <- paste(paste("./", folders[z], "/documents/", sep = ""), file.names, sep="")
i <- 20
file.paths[i]
paste("./", folders[z], "/documents/error-references/", file.names[i], sep = "")
file.paths[i]
delete_reference_section <- function(){
folders <- list.files()
for(z in 1:length(folders)){
# Delete files with "woref" in name if there are any from before
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""), pattern = "_woref.txt")
if(identical(file.names, character(0))==FALSE){
file.paths <- paste(paste("./", folders[z], "/documents/", sep = ""), file.names, sep="")
file.remove(file.paths)
}
# List file names
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""), pattern = "cleaned.txt")
# Generate individual paths to each file
file.paths <- paste(paste("./", folders[z], "/documents/", sep = ""), file.names, sep="")
# Create folder for texts in which references are not identifiable
if(dir.exists(paste("./", folders[z], "/documents/error-references/", sep = ""))==F){
dir.create(paste("./", folders[z], "/documents/error-references/", sep = ""))}
# Loop to generate txt files without reference section
for (i in 1:length(file.paths)){
x <- readLines(file.paths[i])
# Locate "References" section
references.location <- grep("References|REFERENCES", x, ignore.case = FALSE)
# ERROR MESSAGE
if (length(references.location)==1){
print("'References' only appears once. Everything fine with discarding the reference sections.")
# Save text file without references
fileConn<-file(paste("./", folders[z], "/documents/", substr(file.names[i], 1, nchar(file.names[i])-4), "_woref.txt", sep=""))
writeLines(x, fileConn)
close(fileConn)
} else {
cat("\nScotty we have a problem with the references in the following study:\n\n", file.paths[i], sep="")
# Copy those text files in folder
file.copy(file.paths[i], paste("./", folders[z], "/documents/error-references/", file.names[i], sep = ""), overwrite = TRUE, recursive = FALSE,
copy.mode = TRUE, copy.date = FALSE)
# Delete bad PDFs from documents folder
unlink(file.paths[i], force = T)
message("\n\nText file copied to error-references folder.\n")
}
# x <- x[1:references.location-1]
}
}
}
delete_reference_section()
delete_reference_section <- function(){
folders <- list.files()
for(z in 1:length(folders)){
# Delete files with "woref" in name if there are any from before
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""), pattern = "_woref.txt")
if(identical(file.names, character(0))==FALSE){
file.paths <- paste(paste("./", folders[z], "/documents/", sep = ""), file.names, sep="")
file.remove(file.paths)
}
# List file names
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""), pattern = "cleaned.txt")
# Generate individual paths to each file
file.paths <- paste(paste("./", folders[z], "/documents/", sep = ""), file.names, sep="")
# Create folder for texts in which references are not identifiable
if(dir.exists(paste("./", folders[z], "/documents/error-references/", sep = ""))==F){
dir.create(paste("./", folders[z], "/documents/error-references/", sep = ""))}
# Loop to generate txt files without reference section
for (i in 1:length(file.paths)){
x <- readLines(file.paths[i])
# Locate "References" section
references.location <- grep("References|REFERENCES", x, ignore.case = FALSE)
tryCatch(
{
print("'References' only appears once. Everything fine with discarding the reference sections.")
# Save text file without references
fileConn<-file(paste("./", folders[z], "/documents/", substr(file.names[i], 1, nchar(file.names[i])-4), "_woref.txt", sep=""))
writeLines(x, fileConn)
close(fileConn)
},
error=function(cond) {
message(paste("\n PROBLEM! \n", file.paths[i]))
# message("\n Here's the original error message: \n")
# message(cond)
cat("\nScotty we have a problem with the references in the following study:\n\n", file.paths[i], sep="")
# Copy those text files in folder
file.copy(file.paths[i], paste("./", folders[z], "/documents/error-references/", file.names[i], sep = ""), overwrite = TRUE, recursive = FALSE,
copy.mode = TRUE, copy.date = FALSE)
# Delete bad PDFs from documents folder
unlink(file.paths[i], force = T)
message("\n\nText file copied to error-references folder.\n")
},
warning=function(cond) {
message(paste("\n WARNING! \n", file.paths[i]))
# message("Here's the original warning message:")
# message(cond)
cat("\nScotty we have a problem with the references in the following study:\n\n", file.paths[i], sep="")
# Copy those text files in folder
file.copy(file.paths[i], paste("./", folders[z], "/documents/error-references/", file.names[i], sep = ""), overwrite = TRUE, recursive = FALSE,
copy.mode = TRUE, copy.date = FALSE)
# Delete bad PDFs from documents folder
unlink(file.paths[i], force = T)
message("\n\nText file copied to error-references folder.\n")
},
finally={
# NOTE: Final message regardess of error or success
# message(paste("\n\n Finished!", file.paths[i]))
})
}}}
delete_reference_section()
file.paths[i]
paste("./", folders[z], "/documents/error-references/", file.names[i], sep = "")
delete_reference_section <- function(){
folders <- list.files()
for(z in 1:length(folders)){
# Delete files with "woref" in name if there are any from before
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""), pattern = "_woref.txt")
if(identical(file.names, character(0))==FALSE){
file.paths <- paste(paste("./", folders[z], "/documents/", sep = ""), file.names, sep="")
file.remove(file.paths)
}
# List file names
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""), pattern = "cleaned.txt")
# Generate individual paths to each file
file.paths <- paste(paste("./", folders[z], "/documents/", sep = ""), file.names, sep="")
# Create folder for texts in which references are not identifiable
if(dir.exists(paste("./", folders[z], "/documents/error-references/", sep = ""))==F){
dir.create(paste("./", folders[z], "/documents/error-references/", sep = ""))}
# Loop to generate txt files without reference section
for (i in 1:length(file.paths)){
x <- readLines(file.paths[i])
# Locate "References" section
references.location <- grep("References|REFERENCES", x, ignore.case = FALSE)
tryCatch(
{
print("'References' only appears once. Everything fine with discarding the reference sections.")
# Save text file without references
fileConn<-file(paste("./", folders[z], "/documents/", substr(file.names[i], 1, nchar(file.names[i])-4), "_woref.txt", sep=""))
writeLines(x, fileConn)
close(fileConn)
},
error=function(cond) {
message(paste("\n PROBLEM! \n", file.paths[i]))
# message("\n Here's the original error message: \n")
# message(cond)
# Copy those text files in folder
#file.copy(file.paths[i], paste("./", folders[z], "/documents/error-references/", file.names[i], sep = ""), overwrite = TRUE, recursive = FALSE,
#          copy.mode = TRUE, copy.date = FALSE)
# Delete bad PDFs from documents folder
#unlink(file.paths[i], force = T)
#message("\n\nText file copied to error-references folder.\n")
},
warning=function(cond) {
message(paste("\n WARNING! \n", file.paths[i]))
# message("Here's the original warning message:")
# message(cond)
# cat("\nScotty we have a problem with the references in the following study:\n\n", file.paths[i], sep="")
# Copy those text files in folder
# file.copy(file.paths[i], paste("./", folders[z], "/documents/error-references/", file.names[i], sep = ""), overwrite = TRUE, recursive = FALSE,
# copy.mode = TRUE, copy.date = FALSE)
# Delete bad PDFs from documents folder
# unlink(file.paths[i], force = T)
# message("\n\nText file copied to error-references folder.\n")
},
finally={
# NOTE: Final message regardess of error or success
# message(paste("\n\n Finished!", file.paths[i]))
})
}}}
delete_reference_section()
extract_citation_cases()
extract_citation_cases()
clean_citation_cases()
clean_citation_cases()
z <- 1
folders <- list.files()
citation.data <- read.table(paste("./", folders[z], "/citation_cases.csv", sep = ""), sep=",", stringsAsFactors = F)
paste("./", folders[z], "/citation_cases.csv", sep = "")
ear
year
?read.table
citation.data <- read.table(paste("./", folders[z], "/citation_cases.csv", sep = ""), sep=",", quote = "\"'", stringsAsFactors = F)
library(citations)
library(citations)
setwd("C:\\Users\\paul\\Desktop\\citationdata")
library(citations)
extract_text(folder = "Beck 1995", number = 20)
identify_study(study.title = "What to Do (and Not to Do) with Time-Series Cross-Section Data",
folder = "Beck 1995"#
,  number = 20)
delete_reference_section(folder = "Beck 1995", number = 20)
delete_running_heads(folder = "Beck 1995", number = 20)
clean_text(folder = "Beck 1995", number = 20)
install.packages("devtools")
devtools::install_github("paulbauer/citations")
rm(list=ls())
setwd("C:/Users/paul/Desktop/citationdata")
require(quanteda, quietly=TRUE, warn.conflicts = FALSE)
install.packages("quanteda")
require(quanteda, quietly=TRUE, warn.conflicts = FALSE)
require(stm, quietly=TRUE)
install.packages("stm")
require(ggplot2, quietly=TRUE)
require(scales)
require(dplyr)
require(stringr)
options(stringsAsFactors=F)
tf <- read.csv('citation_cases_Beck 1995.csv')
tf$citation.case <- iconv(tf$citation.case, from='UTF-8', to='latin1', sub="")
tf$year <- as.numeric(gsub('.*([0-9]{4}).*', tf$document, repl='\\1'))
tf <- tf[!is.na(tf$year),] # deleting citations with empty years
tf <- tf[!duplicated(tf$citation.case),] # deleting duplicates
authors <- tokenize(toLower(tf$document), removePunct=TRUE, removeNumbers=TRUE)
authors <- unique(unlist(authors))
tf$year <- gsub('.*([0-9]{4}).*', tf$document, repl='\\1')
tokens <- tokenize(toLower(tf$citation.case), removePunct=TRUE, removeNumbers=TRUE)
# removing stopwords, author names, and other frequent words
tokens <- removeFeatures(tokens,
c(stopwords("english"), "other", "others", "see", "also", authors))
# stemming?
#tokens <- lapply(tokens, wordstem)
# creating n-grams
ngrams <- lapply(tokens, ngrams, 1:3)
# putting it all back together...
ngrams <- unlist(lapply(ngrams, paste, collapse=" "))
# deleting empty citations...
todelete <- which(ngrams=="")
tf <- tf[-todelete,]
tokens <- tokens[-todelete]
ngrams <- ngrams[-todelete]
cit <- corpus(ngrams)
docnames(cit) <- paste0(1:nrow(tf), '_', tf$document)
summary(cit)
citmat <- dfm(cit)
