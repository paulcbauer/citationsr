# Just to highlight: if you want to use more than one
# R expression in the "try" part then you'll have to
# use curly brackets.
# 'tryCatch()' will return the last evaluated expression
# in case the "try" part was completed successfully
# message("This is the 'try' part")
fulltext::ft_extract(file.paths[i], which = "xpdf")
# The return value of `readLines()` is the actual value
# that will be returned in case there is no condition
# (e.g. warning or error).
# You don't need to state the return value via `return()` as code
# in the "try" part is not wrapped insided a function (unlike that
# for the condition handlers for warnings and error below)
},
error=function(cond) {
message(paste("\n PROBLEM! \n", file.paths[i]))
message("\n Here's the original error message: \n")
message(cond)
# Create folder for bad PDFs (if not present)
if(dir.exists(paste("./", folders[z], "/documents/error/", sep = ""))==F){
dir.create(paste("./", folders[z], "/documents/error/", sep = ""))}
# Copy bad PDFs to error folder
file.copy(file.paths[i], paste("./", folders[z], "/documents/error/", file.names[i], sep = ""), overwrite = TRUE, recursive = FALSE,
copy.mode = TRUE, copy.date = FALSE)
# Delete bad PDFs from documents folder
# unlink(file.paths[i], force = T)
# message("PDF copied to error folder.")
},
warning=function(cond) {
message(paste("\n WARNING! \n", file.paths[i]))
# message("Here's the original warning message:")
message(cond)
# Choose a return value in case of warning
return(NULL)
},
finally={
# NOTE:
# Here goes everything that should be executed at the end,
# regardless of success or error.
# If you want more than one expression to be executed, then you
# need to wrap them in curly brackets ({...}); otherwise you could
# just have written 'finally=<expression>'
message(paste("\n\n Ok!", file.paths[i]))
})
tryCatch(
{
# Just to highlight: if you want to use more than one
# R expression in the "try" part then you'll have to
# use curly brackets.
# 'tryCatch()' will return the last evaluated expression
# in case the "try" part was completed successfully
# message("This is the 'try' part")
fulltext::ft_extract(file.paths[i], which = "xpdf")
# The return value of `readLines()` is the actual value
# that will be returned in case there is no condition
# (e.g. warning or error).
# You don't need to state the return value via `return()` as code
# in the "try" part is not wrapped insided a function (unlike that
# for the condition handlers for warnings and error below)
},
error=function(cond) {
message(paste("\n PROBLEM! \n", file.paths[i]))
message("\n Here's the original error message: \n")
message(cond)
# Create folder for bad PDFs (if not present)
if(dir.exists(paste("./", folders[z], "/documents/error/", sep = ""))==F){
dir.create(paste("./", folders[z], "/documents/error/", sep = ""))}
# Copy bad PDFs to error folder
file.copy(file.paths[i], paste("./", folders[z], "/documents/error/", file.names[i], sep = ""), overwrite = TRUE, recursive = FALSE,
copy.mode = TRUE, copy.date = FALSE)
# Delete bad PDFs from documents folder
# unlink(file.paths[i], force = T)
# message("PDF copied to error folder.")
},
warning=function(cond) {
message(paste("\n WARNING! \n", file.paths[i]))
# message("Here's the original warning message:")
message(cond)
# Create folder for bad PDFs (if not present)
if(dir.exists(paste("./", folders[z], "/documents/error/", sep = ""))==F){
dir.create(paste("./", folders[z], "/documents/error/", sep = ""))}
# Copy bad PDFs to error folder
file.copy(file.paths[i], paste("./", folders[z], "/documents/error/", file.names[i], sep = ""), overwrite = TRUE, recursive = FALSE,
copy.mode = TRUE, copy.date = FALSE)
},
finally={
# NOTE:
# Here goes everything that should be executed at the end,
# regardless of success or error.
# If you want more than one expression to be executed, then you
# need to wrap them in curly brackets ({...}); otherwise you could
# just have written 'finally=<expression>'
message(paste("\n\n Ok!", file.paths[i]))
})
tryCatch(
{
# Just to highlight: if you want to use more than one
# R expression in the "try" part then you'll have to
# use curly brackets.
# 'tryCatch()' will return the last evaluated expression
# in case the "try" part was completed successfully
# message("This is the 'try' part")
fulltext::ft_extract(file.paths[i], which = "xpdf")
# The return value of `readLines()` is the actual value
# that will be returned in case there is no condition
# (e.g. warning or error).
# You don't need to state the return value via `return()` as code
# in the "try" part is not wrapped insided a function (unlike that
# for the condition handlers for warnings and error below)
message(paste("\n\n Ok!", file.paths[i]))
},
error=function(cond) {
message(paste("\n PROBLEM! \n", file.paths[i]))
message("\n Here's the original error message: \n")
message(cond)
# Create folder for bad PDFs (if not present)
if(dir.exists(paste("./", folders[z], "/documents/error/", sep = ""))==F){
dir.create(paste("./", folders[z], "/documents/error/", sep = ""))}
# Copy bad PDFs to error folder
file.copy(file.paths[i], paste("./", folders[z], "/documents/error/", file.names[i], sep = ""), overwrite = TRUE, recursive = FALSE,
copy.mode = TRUE, copy.date = FALSE)
# Delete bad PDFs from documents folder
# unlink(file.paths[i], force = T)
# message("PDF copied to error folder.")
},
warning=function(cond) {
message(paste("\n WARNING! \n", file.paths[i]))
# message("Here's the original warning message:")
message(cond)
# Create folder for bad PDFs (if not present)
if(dir.exists(paste("./", folders[z], "/documents/error/", sep = ""))==F){
dir.create(paste("./", folders[z], "/documents/error/", sep = ""))}
# Copy bad PDFs to error folder
file.copy(file.paths[i], paste("./", folders[z], "/documents/error/", file.names[i], sep = ""), overwrite = TRUE, recursive = FALSE,
copy.mode = TRUE, copy.date = FALSE)
},
finally={
# NOTE:
# Here goes everything that should be executed at the end,
# regardless of success or error.
# If you want more than one expression to be executed, then you
# need to wrap them in curly brackets ({...}); otherwise you could
# just have written 'finally=<expression>'
# message(paste("\n\n Finished!", file.paths[i]))
})
tryCatch(
{
# Just to highlight: if you want to use more than one
# R expression in the "try" part then you'll have to
# use curly brackets.
# 'tryCatch()' will return the last evaluated expression
# in case the "try" part was completed successfully
# message("This is the 'try' part")
fulltext::ft_extract(file.paths[i], which = "xpdf")
# The return value of `readLines()` is the actual value
# that will be returned in case there is no condition
# (e.g. warning or error).
# You don't need to state the return value via `return()` as code
# in the "try" part is not wrapped insided a function (unlike that
# for the condition handlers for warnings and error below)
message(paste("\n\n Ok!", file.paths[i]))
},
error=function(cond) {
message(paste("\n PROBLEM! \n", file.paths[i]))
message("\n Here's the original error message: \n")
message(cond)
# Create folder for bad PDFs (if not present)
if(dir.exists(paste("./", folders[z], "/documents/error/", sep = ""))==F){
dir.create(paste("./", folders[z], "/documents/error/", sep = ""))}
# Copy bad PDFs to error folder
file.copy(file.paths[i], paste("./", folders[z], "/documents/error/", file.names[i], sep = ""), overwrite = TRUE, recursive = FALSE,
copy.mode = TRUE, copy.date = FALSE)
# Delete bad PDFs from documents folder
# unlink(file.paths[i], force = T)
message("PDF copied to error folder.")
},
warning=function(cond) {
message(paste("\n WARNING! \n", file.paths[i]))
# message("Here's the original warning message:")
message(cond)
# Create folder for bad PDFs (if not present)
if(dir.exists(paste("./", folders[z], "/documents/error/", sep = ""))==F){
dir.create(paste("./", folders[z], "/documents/error/", sep = ""))}
# Copy bad PDFs to error folder
file.copy(file.paths[i], paste("./", folders[z], "/documents/error/", file.names[i], sep = ""), overwrite = TRUE, recursive = FALSE,
copy.mode = TRUE, copy.date = FALSE)
message("PDF copied to error folder.")
},
finally={
# NOTE:
# Here goes everything that should be executed at the end,
# regardless of success or error.
# If you want more than one expression to be executed, then you
# need to wrap them in curly brackets ({...}); otherwise you could
# just have written 'finally=<expression>'
# message(paste("\n\n Finished!", file.paths[i]))
})
tryCatch(
{
# Just to highlight: if you want to use more than one
# R expression in the "try" part then you'll have to
# use curly brackets.
# 'tryCatch()' will return the last evaluated expression
# in case the "try" part was completed successfully
# message("This is the 'try' part")
fulltext::ft_extract(file.paths[i], which = "xpdf")
# The return value of `readLines()` is the actual value
# that will be returned in case there is no condition
# (e.g. warning or error).
# You don't need to state the return value via `return()` as code
# in the "try" part is not wrapped insided a function (unlike that
# for the condition handlers for warnings and error below)
message(paste("\n\n Ok!", file.paths[i]))
},
error=function(cond) {
message(paste("\n PROBLEM! \n", file.paths[i]))
# message("\n Here's the original error message: \n")
# message(cond)
# Create folder for bad PDFs (if not present)
if(dir.exists(paste("./", folders[z], "/documents/error/", sep = ""))==F){
dir.create(paste("./", folders[z], "/documents/error/", sep = ""))}
# Copy bad PDFs to error folder
file.copy(file.paths[i], paste("./", folders[z], "/documents/error/", file.names[i], sep = ""), overwrite = TRUE, recursive = FALSE,
copy.mode = TRUE, copy.date = FALSE)
# Delete bad PDFs from documents folder
# unlink(file.paths[i], force = T)
message("\n\nPDF copied to error folder.\n")
},
warning=function(cond) {
message(paste("\n WARNING! \n", file.paths[i]))
# message("Here's the original warning message:")
# message(cond)
# Create folder for bad PDFs (if not present)
if(dir.exists(paste("./", folders[z], "/documents/error/", sep = ""))==F){
dir.create(paste("./", folders[z], "/documents/error/", sep = ""))}
# Copy bad PDFs to error folder
file.copy(file.paths[i], paste("./", folders[z], "/documents/error/", file.names[i], sep = ""), overwrite = TRUE, recursive = FALSE,
copy.mode = TRUE, copy.date = FALSE)
message("\n\n PDF copied to error folder.\n")
},
finally={
# NOTE:
# Here goes everything that should be executed at the end,
# regardless of success or error.
# If you want more than one expression to be executed, then you
# need to wrap them in curly brackets ({...}); otherwise you could
# just have written 'finally=<expression>'
# message(paste("\n\n Finished!", file.paths[i]))
})
length(file.paths)
for (i in 1:length(file.paths)){  #
tryCatch(
{
# Just to highlight: if you want to use more than one
# R expression in the "try" part then you'll have to
# use curly brackets.
# 'tryCatch()' will return the last evaluated expression
# in case the "try" part was completed successfully
# message("This is the 'try' part")
fulltext::ft_extract(file.paths[i], which = "xpdf")
# The return value of `readLines()` is the actual value
# that will be returned in case there is no condition
# (e.g. warning or error).
# You don't need to state the return value via `return()` as code
# in the "try" part is not wrapped insided a function (unlike that
# for the condition handlers for warnings and error below)
message(paste("\n\n Ok!", file.paths[i]))
},
error=function(cond) {
message(paste("\n PROBLEM! \n", file.paths[i]))
# message("\n Here's the original error message: \n")
# message(cond)
# Create folder for bad PDFs (if not present)
if(dir.exists(paste("./", folders[z], "/documents/error/", sep = ""))==F){
dir.create(paste("./", folders[z], "/documents/error/", sep = ""))}
# Copy bad PDFs to error folder
file.copy(file.paths[i], paste("./", folders[z], "/documents/error/", file.names[i], sep = ""), overwrite = TRUE, recursive = FALSE,
copy.mode = TRUE, copy.date = FALSE)
# Delete bad PDFs from documents folder
# unlink(file.paths[i], force = T)
message("\n\nPDF copied to error folder.\n")
},
warning=function(cond) {
message(paste("\n WARNING! \n", file.paths[i]))
# message("Here's the original warning message:")
# message(cond)
# Create folder for bad PDFs (if not present)
if(dir.exists(paste("./", folders[z], "/documents/error/", sep = ""))==F){
dir.create(paste("./", folders[z], "/documents/error/", sep = ""))}
# Copy bad PDFs to error folder
file.copy(file.paths[i], paste("./", folders[z], "/documents/error/", file.names[i], sep = ""), overwrite = TRUE, recursive = FALSE,
copy.mode = TRUE, copy.date = FALSE)
message("\n\n PDF copied to error folder.\n")
},
finally={
# NOTE:
# Here goes everything that should be executed at the end,
# regardless of success or error.
# If you want more than one expression to be executed, then you
# need to wrap them in curly brackets ({...}); otherwise you could
# just have written 'finally=<expression>'
# message(paste("\n\n Finished!", file.paths[i]))
})}
cat("\n\n For", folders[z], " text extraction too around ", as.numeric(time[3]), " second(s) this is around ", round(as.numeric(time[3])/60,2), " minutes.\n", sep = "")
folders[z]
dir(paste(".\", folders[z], sep=""))
)
paste(".\", folders[z], sep="")
paste("./", folders[z], sep="")
dir(paste("./", folders[z], sep=""))
dir(paste("./", folders[z], "/error/", sep=""))
dir(paste("./", folders[z], "/errors/", sep=""))
paste("./", folders[z], "/errors/", sep="")
dir(paste("./", folders[z], "/error/", sep=""))
dir(paste("./", folders[z], "/error", sep=""))
paste("./", folders[z], "/error", sep="")
dir(paste("./", folders[z], "/documents/error", sep=""))
length(dir(paste("./", folders[z], "/documents/error", sep="")))
cat("\n\n For", folders[z], " ", length(dir(paste("./", folders[z], "/documents/error", sep=""))),
" files had problems" , sep = "")
cat("\n\n For '", folders[z], "' ", length(dir(paste("./", folders[z], "/documents/error", sep=""))),
" files had problems" , sep = "")
cat("\n\n For '", folders[z], "' ", length(dir(paste("./", folders[z], "/documents/error", sep=""))),
" PDF files were problematic." , sep = "")
cat("\n\n For '", folders[z], "' ", length(dir(paste("./", folders[z], "/documents/error", sep=""))),
" PDF files were problematic." , sep = "")
ptm <- proc.time()
for (i in 1:length(file.paths)){  #
tryCatch(
{
fulltext::ft_extract(file.paths[i], which = "xpdf")
message(paste("\n\n Ok!", file.paths[i]))
},
error=function(cond) {
message(paste("\n PROBLEM! \n", file.paths[i]))
# message("\n Here's the original error message: \n")
# message(cond)
# Create folder for bad PDFs (if not present)
if(dir.exists(paste("./", folders[z], "/documents/error/", sep = ""))==F){
dir.create(paste("./", folders[z], "/documents/error/", sep = ""))}
# Copy bad PDFs to error folder
file.copy(file.paths[i], paste("./", folders[z], "/documents/error/", file.names[i], sep = ""), overwrite = TRUE, recursive = FALSE,
copy.mode = TRUE, copy.date = FALSE)
# Delete bad PDFs from documents folder
unlink(file.paths[i], force = T)
message("\n\nPDF copied to error folder.\n")
},
warning=function(cond) {
message(paste("\n WARNING! \n", file.paths[i]))
# message("Here's the original warning message:")
# message(cond)
# Create folder for bad PDFs (if not present)
if(dir.exists(paste("./", folders[z], "/documents/error/", sep = ""))==F){
dir.create(paste("./", folders[z], "/documents/error/", sep = ""))}
# Copy bad PDFs to error folder
file.copy(file.paths[i], paste("./", folders[z], "/documents/error/", file.names[i], sep = ""), overwrite = TRUE, recursive = FALSE,
copy.mode = TRUE, copy.date = FALSE)
# Delete bad PDFs from documents folder
unlink(file.paths[i], force = T)
message("\n\n PDF copied to error folder.\n")
},
finally={
# NOTE: Final message regardess of error or success
# message(paste("\n\n Finished!", file.paths[i]))
})}
library(citations)
library(XML)
library(stringr)
library(fulltext)
library(citations)
setwd("C:\\Users\\paul\\Google Drive\\Research\\2016_Quality_of_citations\\Analysis\\data")
library(citations)
fetch_paperpiledocs(paperpile.directory = "C:\\Users\\paul\\Google Drive\\Paperpile\\")
extract_text
extract_text()
clean_text()
clean_text()
dir()
z <-
1
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""), pattern = ".pdf")
file.names
str_detect(file.names, "...")
str_detect(file.names, "\\.\\.\\.")
file.names
file.names
if(str_detect(file.names, "\\.\\.\\.")==TRUE){
file.rename(file.names, str_replace(file.names, "...", " "))
}
for(i in 1:length(file.names)){
if(str_detect(file.names[i], "\\.\\.\\.")==TRUE){
file.rename(file.names[i], str_replace(file.names[i], "...", " "))
}
}
file.names
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""), pattern = ".pdf")
for(i in 1:length(file.names)){
if(str_detect(file.names[i], "\\.\\.\\.")==TRUE){
file.rename(file.names[i], str_replace(file.names[i], "\\.\\.\\.", " "))
}
}
file.names
file.names[i]
file.names
paste("./", folders[z], "/documents/", sep = "")
paste("./", folders[z], "/documents/", file.names[i], sep = "")
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""), pattern = ".pdf")
for(i in 1:length(file.names)){
if(str_detect(file.names[i], "\\.\\.\\.")==TRUE){
file.rename(paste("./", folders[z], "/documents/", file.names[i], sep = "")
, str_replace(paste("./", folders[z], "/documents/", file.names[i], sep = ""), "\\.\\.\\.", " "))
}
}
file.names
for(i in 1:length(file.names)){
if(str_detect(file.names[i], "\.\.\.")==TRUE){
file.rename(paste("./", folders[z], "/documents/", file.names[i], sep = "")
, str_replace(paste("./", folders[z], "/documents/", file.names[i], sep = ""), "\.\.\.", " "))
}
}
paste("./", folders[z], "/documents/", file.names[i], sep = "")
i <- 1410
str_detect(file.names[i], "\\.\\.\\.")==TRUE
paste("./", folders[z], "/documents/", file.names[i], sep = "")
str_replace(paste("./", folders[z], "/documents/", file.names[i], sep = ""), "\\.\\.\\.", " ")
if(str_detect(file.names[i], "\\.\\.\\.")==TRUE){
file.rename(paste("./", folders[z], "/documents/", file.names[i], sep = "")
, str_replace(paste("./", folders[z], "/documents/", file.names[i], sep = ""), "\\.\\.\\.", " "))
}
file.names
str_detect(file.names[i], "\\.\\.\\.")==TRUE
?file.rename
paste("./", folders[z], "/documents/", file.names[i], sep = "")
file.rename(paste("./", folders[z], "/documents/", file.names[i], sep = "")
, str_replace(paste("./", folders[z], "/documents/", file.names[i], sep = ""), "\\.\\.\\.", " "))
str_replace(paste("./", folders[z], "/documents/", file.names[i], sep = ""), "\\.\\.\\.", " ")
file.rename(paste("/", folders[z], "/documents/", file.names[i], sep = "")
, str_replace(paste("/", folders[z], "/documents/", file.names[i], sep = ""), "\\.\\.\\.", " "))
paste("/", folders[z], "/documents/", file.names[i], sep = "")
str_replace(paste("/", folders[z], "/documents/", file.names[i], sep = ""), "\\.\\.\\.", " ")
file.rename(paste("/", folders[z], "/documents/", file.names[i], sep = "")
, str_replace(paste("/", folders[z], "/documents/", file.names[i], sep = ""), "\\.\\.\\.", " "),
overwrite = T)
?file.path
file.path(paste("/", folders[z], "/documents/", sep = ""), file.names)
file.path(paste("/", folders[z], "/documents", sep = ""), file.names)
file.path(paste("/", folders[z], "/documents",sep = ""), str_replace(file.names, "\\.\\.\\.", " ")
)
file.rename(from = file.path(paste("/", folders[z], "/documents", sep = ""), file.names),
to = file.path(paste("/", folders[z], "/documents",sep = ""), str_replace(file.names, "\\.\\.\\.", " ")))
file.names
folders <- list.files()
folders
# Specify folders, i.e. studies
folders <- list.files()
for(z in 1:length(folders)){
# Identify files
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""), pattern = ".pdf")
for(i in 1:length(file.names)){
if(str_detect(file.names[i], "\\.\\.\\.")==TRUE){
file.rename(paste("/", folders[z], "/documents/", file.names[i], sep = "")
, str_replace(paste("/", folders[z], "/documents/", file.names[i], sep = ""), "\\.\\.\\.", " "))
}
}
}
# Specify folders, i.e. studies
folders <- list.files()
for(z in 1:length(folders)){
# Identify files
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""), pattern = ".pdf")
for(i in 1:length(file.names)){
if(str_detect(file.names[i], "\\.\\.\\.")==TRUE){
file.rename(paste("/", folders[z], "/documents/", file.names[i], sep = "")
, str_replace(paste("/", folders[z], "/documents/", file.names[i], sep = ""), "…", " "))
}
}
}
z <- 5
folders <- list.files()
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""), pattern = ".pdf")
file.names
folders <- list.files()
for(z in 1:length(folders)){
# Identify files
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""), pattern = ".pdf")
for(i in 1:length(file.names)){
if(str_detect(file.names[i], "…")==TRUE){
file.rename(paste("/", folders[z], "/documents/", file.names[i], sep = "")
, str_replace(paste("/", folders[z], "/documents/", file.names[i], sep = ""), "…", " "))
}
}
}
# Specify folders, i.e. studies
folders <- list.files()
for(z in 1:length(folders)){
# Identify files
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""), pattern = ".pdf")
for(i in 1:length(file.names)){
if(str_detect(file.names[i], "…")==TRUE){
file.rename(paste("/", folders[z], "/documents/", file.names[i], sep = "")
, str_replace(paste("/", folders[z], "/documents/", file.names[i], sep = ""), "…", " "))
}
if(str_detect(file.names[i], "\\.\\.\\.")==TRUE){
file.rename(paste("/", folders[z], "/documents/", file.names[i], sep = "")
, str_replace(paste("/", folders[z], "/documents/", file.names[i], sep = ""), "\\.\\.\\.", " "))
}
}
}
z
folders[z]
extract_text()
extract_text()
