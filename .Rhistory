# Generate individual paths to each file
file.paths <- paste(paste("./", folders[z], "/documents/", sep = ""), file.names, sep="")
# Load documents and search for full citation in them
list.extracted.titles <- NULL
for (i in 1:length(file.paths)){ # 4 DOES NOT WORK!
x <- readLines(file.paths[i])
x <- paste(x, collapse = " ")
# aregexec()
DISTANCE <- 20 # CHOOSE DISTANCE: Must be high enough!
start <- aregexec(study.title, x, max.distance = DISTANCE)[[1]][1]
length <- as.numeric(attributes(aregexec(study.title, x, max.distance = DISTANCE)[[1]]))
end <- start + length - 1
start <- start - 70
end <- end + 60
extracted.title <- substr(x, start, end)
list.extracted.titles[[i]] <- extracted.title
}
# Replace so that whitespace is omitted
cbind(str_extract(file.names, "[^-]*"), list.extracted.titles)
write.table(cbind(str_extract(file.names, "[^-]*"), list.extracted.titles), paste("./", folders[z], "/documents/identify_citation.csv", sep = ""))
cat("\n Check whether citation were rightly identifed using file 'identify_citation.csv' in the respective study folder. \n\n")
}
}
x <- identify_in_document(study.title = "How elite partisan polarization affects public opinion formation")
identify_study <- function(study.title){
folders <- list.files()
for(z in 1:length(folders)){
# List file names
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""), pattern = "cleaned.txt")
# Generate individual paths to each file
file.paths <- paste(paste("./", folders[z], "/documents/", sep = ""), file.names, sep="")
# Load documents and search for full citation in them
list.extracted.titles <- NULL
for (i in 1:length(file.paths)){ # 4 DOES NOT WORK!
x <- readLines(file.paths[i])
x <- paste(x, collapse = " ")
# aregexec()
DISTANCE <- 20 # CHOOSE DISTANCE: Must be high enough!
start <- aregexec(study.title, x, max.distance = DISTANCE)[[1]][1]
length <- as.numeric(attributes(aregexec(study.title, x, max.distance = DISTANCE)[[1]]))
end <- start + length - 1
start <- start - 70
end <- end + 60
extracted.title <- substr(x, start, end)
list.extracted.titles[[i]] <- extracted.title
}
# Replace so that whitespace is omitted
cbind(str_extract(file.names, "[^-]*"), list.extracted.titles)
write.table(cbind(str_extract(file.names, "[^-]*"), list.extracted.titles), paste("./", folders[z], "/documents/identify_citation.csv", sep = ""))
cat("\n Check whether citation were rightly identifed using file 'identify_citation.csv' in the respective study folder. \n\n")
}
}
x <- identify_study(study.title = "How elite partisan polarization affects public opinion formation")
x
library(citations)
identify_study(study.title = "How elite partisan polarization affects public opinion formation")
identify_study <- function(study.title){
folders <- list.files()
for(z in 1:length(folders)){
# List file names
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""), pattern = "cleaned.txt")
# Generate individual paths to each file
file.paths <- paste(paste("./", folders[z], "/documents/", sep = ""), file.names, sep="")
# Load documents and search for full citation in them
list.extracted.titles <- NULL
for (i in 1:length(file.paths)){ # 4 DOES NOT WORK!
x <- readLines(file.paths[i])
x <- paste(x, collapse = " ")
# aregexec()
DISTANCE <- 20 # CHOOSE DISTANCE: Must be high enough!
start <- aregexec(study.title, x, max.distance = DISTANCE)[[1]][1]
length <- as.numeric(attributes(aregexec(study.title, x, max.distance = DISTANCE)[[1]]))
end <- start + length - 1
start <- start - 70
end <- end + 60
extracted.title <- substr(x, start, end)
list.extracted.titles[[i]] <- extracted.title
}
# Replace so that whitespace is omitted
cbind(str_extract(file.names, "[^-]*"), list.extracted.titles)
write.table(cbind(str_extract(file.names, "[^-]*"), list.extracted.titles), paste("./", folders[z], "/identify_citation.csv", sep = ""))
cat("\n Check whether citation were rightly identifed using file 'identify_citation.csv' in the respective study folder. \n\n")
}
}
identify_study(study.title = "How elite partisan polarization affects public opinion formation")
delete_reference_section <- function(documents.path){
folders <- list.files()
for(z in 1:length(folders)){
# Delete files with "cleaned" in name if there are any from before
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""), pattern = "_woref.txt")
if(identical(file.names, character(0))==FALSE){
file.paths <- paste(paste("./", folders[z], "/documents/", sep = ""), file.names, sep="")
file.remove(file.paths)
}
# List file names
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""), pattern = "cleaned.txt")
# Generate individual paths to each file
file.paths <- paste(paste("./", folders[z], "/documents/", sep = ""), file.names, sep="")
# Load documents and search for full citation in them
list.extracted.titles <- NULL
for (i in 1:length(file.paths)){ # 4 DOES NOT WORK!
x <- readLines(file.paths[i])
# Locate "References" section
references.location <- grep("References|REFERENCES", x, ignore.case = FALSE)
if (length(references.location)==1){
print("'References' only appears once. Everything fine with discarding the references")
} else {
cat("\nScotty we have a problem with the references in the following study:\n\n", file.paths[i], sep="")
cat("\n\n", "We identified '", grep("References|REFERENCES", x, ignore.case = FALSE, value=T), "' was identified.\n", sep = "")
}
x <- x[1:references.location-1]
fileConn<-file(paste("./", folders[z], "/documents/", substr(file.names[i], 1, nchar(file.names[i])-4), "_woref.txt", sep=""))
writeLines(x, fileConn)
close(fileConn)
}
}
}
delete_references()
delete_reference_section()
extract_text()
library(citations)
setwd("C:\\Users\\pbauer\\Google Drive\\Research\\2015_Quality_of_citations\\Analysis")
extract_text()
clean_text()
identify_study(study.title = "How elite partisan polarization affects public opinion formation")
delete_reference_section()
paste("./", folders[z], "/documents/", sep = "")
,
paste("./", folders[z], "/citation_cases.csv", sep = "")
extract_citation_cases <- function(){
folders <- list.files()
for(z in 1:length(folders)){
# Get file names
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""), pattern = "cleaned_woref.txt")
# Generate individual paths to each file
file.paths <- paste(paste("./", folders[z], "/documents/", sep = ""), file.names, sep="")
# Load documents and search for full citation in them
all.docs.cit.cases <- NULL
for (i in 1:length(file.paths)){ # 4 DOES NOT WORK!
x <- readLines(file.paths[i])
x <- paste(x, collapse = " ")
cit.cases.doc.i <- str_extract_all(x, "\\.[^.]*Druckman[^.]*\\.")
all.docs.cit.cases[i] <- cit.cases.doc.i
}
# Get fist estimate of number of citation cases
total.citation.cases <- sum(sapply(all.docs.cit.cases, length))
cat("\n We have identified ", total.citation.cases, " citation cases within ", length(file.paths), " documents.", sep="")
# Generate dataframe with citation cases
citation.data <- data.frame(document = 1:total.citation.cases, citation.case = 1:total.citation.cases)
citation.data[,1] <- rep(file.names, sapply(all.docs.cit.cases, length))
citation.data[,2] <- unlist(all.docs.cit.cases)
# Change document names
citation.data$document <- sub("\\s+$", "", str_extract(citation.data$document, "^[^-]+"))
print(citation.data)
write.table(citation.data, file =  paste("./", folders[z], "/citation_cases.csv", sep = ""), sep=",")
cat("\n \nThey are printed and saved in the file named 'citation_cases.csv'.")
}
}
extract_citation_cases()
extract_citation_cases <- function(){
folders <- list.files()
for(z in 1:length(folders)){
# Get file names
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""), pattern = "cleaned_woref.txt")
# Generate individual paths to each file
file.paths <- paste(paste("./", folders[z], "/documents/", sep = ""), file.names, sep="")
# Load documents and search for full citation in them
all.docs.cit.cases <- NULL
for (i in 1:length(file.paths)){ # 4 DOES NOT WORK!
x <- readLines(file.paths[i])
x <- paste(x, collapse = " ")
cit.cases.doc.i <- str_extract_all(x, "\\.[^.]*Druckman[^.]*\\.")
all.docs.cit.cases[i] <- cit.cases.doc.i
}
# Get fist estimate of number of citation cases
total.citation.cases <- sum(sapply(all.docs.cit.cases, length))
cat("\n We have identified ", total.citation.cases, " citation cases within ", length(file.paths), " documents.", sep="")
# Generate dataframe with citation cases
citation.data <- data.frame(document = 1:total.citation.cases, citation.case = 1:total.citation.cases)
citation.data[,1] <- rep(file.names, sapply(all.docs.cit.cases, length))
citation.data[,2] <- unlist(all.docs.cit.cases)
# Change document names
citation.data$document <- sub("\\s+$", "", str_extract(citation.data$document, "^[^-]+"))
# print(citation.data)
write.table(citation.data, file =  paste("./", folders[z], "/citation_cases.csv", sep = ""), sep=",")
cat("\n \nThey are printed and saved in the file named 'citation_cases.csv'.")
}
}
extract_citation_cases()
extract_citation_cases <- function(){
folders <- list.files()
for(z in 1:length(folders)){
# Get file names
file.names <- dir(paste("./", folders[z], "/documents/", sep = ""), pattern = "cleaned_woref.txt")
# Generate individual paths to each file
file.paths <- paste(paste("./", folders[z], "/documents/", sep = ""), file.names, sep="")
# Load documents and search for full citation in them
all.docs.cit.cases <- NULL
for (i in 1:length(file.paths)){ # 4 DOES NOT WORK!
x <- readLines(file.paths[i])
x <- paste(x, collapse = " ")
cit.cases.doc.i <- str_extract_all(x, "\\.[^.]*Druckman[^.]*\\.")
all.docs.cit.cases[i] <- cit.cases.doc.i
}
# Get fist estimate of number of citation cases
total.citation.cases <- sum(sapply(all.docs.cit.cases, length))
cat("\n For ", folders[z], " we have identified ", total.citation.cases, " citation cases within ", length(file.paths), " documents.", sep="")
# Generate dataframe with citation cases
citation.data <- data.frame(document = 1:total.citation.cases, citation.case = 1:total.citation.cases)
citation.data[,1] <- rep(file.names, sapply(all.docs.cit.cases, length))
citation.data[,2] <- unlist(all.docs.cit.cases)
# Change document names
citation.data$document <- sub("\\s+$", "", str_extract(citation.data$document, "^[^-]+"))
# print(citation.data)
write.table(citation.data, file =  paste("./", folders[z], "/citation_cases.csv", sep = ""), sep=",")
cat("\n \nThey are printed and saved in the file named 'citation_cases.csv'.\n\n")
}
}
extract_citation_cases()
paste("./", folders[z], "/documents/", sep = "")
paste("./", folders[z], "/documents/citation_cases.csv", sep = "")
paste("./", folders[z], "/documents/citation_cases.csv", sep = "")
cat("\n\n Cleaned citation data file saved under 'citation_data_cleaned.csv' in the working directory.\n\n", working.directory, "\n\n", sep="")
clean_citation_cases <- function(file){
folders <- list.files()
for(z in 1:length(folders)){
citation.data <- read.table(paste("./", folders[z], "/documents/citation_cases.csv", sep = ""), sep=",", stringsAsFactors = F)
# STEP 1:  Keep citation cases that match with the year of the respective citation, e.g. 2013
if (length(study.data$year)==1){
cat("\n\nYou defined before that the year of the study is ", study.data$year,". Only cases are pulled out that contain that year.\n\n", sep = "")
} else {
cat("\n\n You probably didn't define 'study.data' because no year was found.\n\n", sep="")
}
citation.data <- citation.data[str_detect(citation.data$citation.case, study.data$year)==TRUE,]
# STEP 2:
# Clean leading dots .
citation.data$citation.case <- str_replace(citation.data$citation.case, "^. ", "")
# Clean trailing dots .
citation.data$citation.case <- str_replace(citation.data$citation.case, ".$", "")
write.table(citation.data, paste("./", folders[z], "/documents/citation_cases_cleaned.csv", sep = ""), sep = ",")
cat("\n\n Cleaned citation data file saved under 'citation_data_cleaned.csv' in the corresponding study folder.\n\n")
}
}
clean_citation_cases()
z <- 1
folders <- list.files()
folders
citation.data <- read.table(paste("./", folders[z], "/documents/citation_cases.csv", sep = ""), sep=",", stringsAsFactors = F)
paste("./", folders[z], "/documents/citation_cases.csv", sep = "")
getwd()
read.table(paste("./", folders[z], "/documents/citation_cases.csv", sep = ""), sep=",", stringsAsFactors = F)
clean_citation_cases <- function(file){
folders <- list.files()
for(z in 1:length(folders)){
citation.data <- read.table(paste("./", folders[z], "/citation_cases.csv", sep = ""), sep=",", stringsAsFactors = F)
# STEP 1:  Keep citation cases that match with the year of the respective citation, e.g. 2013
if (length(study.data$year)==1){
cat("\n\nYou defined before that the year of the study is ", study.data$year,". Only cases are pulled out that contain that year.\n\n", sep = "")
} else {
cat("\n\n You probably didn't define 'study.data' because no year was found.\n\n", sep="")
}
citation.data <- citation.data[str_detect(citation.data$citation.case, study.data$year)==TRUE,]
# STEP 2:
# Clean leading dots .
citation.data$citation.case <- str_replace(citation.data$citation.case, "^. ", "")
# Clean trailing dots .
citation.data$citation.case <- str_replace(citation.data$citation.case, ".$", "")
write.table(citation.data, paste("./", folders[z], "/documents/citation_cases_cleaned.csv", sep = ""), sep = ",")
cat("\n\n Cleaned citation data file saved under 'citation_data_cleaned.csv' in the corresponding study folder.\n\n")
}
}
clean_citation_cases()
clean_citation_cases()
paste("./", folders[z], "/citation_cases.csv", sep = "")
folders[z]
str_extract(folders[z], "[0-9][0-9][0-9][0-9]")
year <- as.numeric(str_extract(folders[z], "[0-9][0-9][0-9][0-9]"))
year
clean_citation_cases <- function(file){
folders <- list.files()
for(z in 1:length(folders)){
citation.data <- read.table(paste("./", folders[z], "/citation_cases.csv", sep = ""), sep=",", stringsAsFactors = F)
# Year pulled out of folder name
year <- as.numeric(str_extract(folders[z], "[0-9][0-9][0-9][0-9]"))
# STEP 1:  Keep citation cases that match with the year of the respective citation, e.g. 2013
if (length(year)==1){
cat("\n\nYou defined before that the year of the study is ", year,". Only cases are pulled out that contain that year.\n\n", sep = "")
} else {
cat("\n\n You probably didn't define 'study.data' because no year was found.\n\n", sep="")
}
citation.data <- citation.data[str_detect(citation.data$citation.case, year)==TRUE,]
# STEP 2:
# Clean leading dots .
citation.data$citation.case <- str_replace(citation.data$citation.case, "^. ", "")
# Clean trailing dots .
citation.data$citation.case <- str_replace(citation.data$citation.case, ".$", "")
write.table(citation.data, paste("./", folders[z], "/documents/citation_cases_cleaned.csv", sep = ""), sep = ",")
cat("\n\n Cleaned citation data file saved under 'citation_data_cleaned.csv' in the corresponding study folder.\n\n")
}
}
clean_citation_cases()
z <- 1
citation.data <- read.table(paste("./", folders[z], "/citation_cases.csv", sep = ""), sep=",", stringsAsFactors = F)
folders <- list.files()
citation.data <- read.table(paste("./", folders[z], "/citation_cases.csv", sep = ""), sep=",", stringsAsFactors = F)
year <- as.numeric(str_extract(folders[z], "[0-9][0-9][0-9][0-9]"))
if (length(year)==1){
cat("\n\nYou defined before that the year of the study is ", year,". Only cases are pulled out that contain that year.\n\n", sep = "")
} else {
cat("\n\n You probably didn't define 'study.data' because no year was found.\n\n", sep="")
}
citation.data <- citation.data[str_detect(citation.data$citation.case, year)==TRUE,]
citation.data$citation.case
citation.data <- citation.data[str_detect(citation.data$citation.case, as.character(year))==TRUE,]
citation.data$citation.case <- str_replace(citation.data$citation.case, "^. ", "")
citation.data$citation.case <- str_replace(citation.data$citation.case, ".$", "")
write.table(citation.data, paste("./", folders[z], "/documents/citation_cases_cleaned.csv", sep = ""), sep = ",")
cat("\n\n Cleaned citation data file saved under 'citation_data_cleaned.csv' in the corresponding study folder.\n\n")
clean_citation_cases <- function(file){
folders <- list.files()
for(z in 1:length(folders)){
citation.data <- read.table(paste("./", folders[z], "/citation_cases.csv", sep = ""), sep=",", stringsAsFactors = F)
# Year pulled out of folder name
year <- as.numeric(str_extract(folders[z], "[0-9][0-9][0-9][0-9]"))
# STEP 1:  Keep citation cases that match with the year of the respective citation, e.g. 2013
if (length(year)==1){
cat("\n\nYou defined before that the year of the study is ", year,". Only cases are pulled out that contain that year.\n\n", sep = "")
} else {
cat("\n\n You probably didn't define 'study.data' because no year was found.\n\n", sep="")
}
citation.data <- citation.data[str_detect(citation.data$citation.case, as.character(year))==TRUE,]
# STEP 2:
# Clean leading dots .
citation.data$citation.case <- str_replace(citation.data$citation.case, "^. ", "")
# Clean trailing dots .
citation.data$citation.case <- str_replace(citation.data$citation.case, ".$", "")
write.table(citation.data, paste("./", folders[z], "/documents/citation_cases_cleaned.csv", sep = ""), sep = ",")
cat("\n\n Cleaned citation data file saved under 'citation_data_cleaned.csv' in the corresponding study folder.\n\n")
}
}
clean_citation_cases()
clean_citation_cases <- function(file){
folders <- list.files()
for(z in 1:length(folders)){
citation.data <- read.table(paste("./", folders[z], "/citation_cases.csv", sep = ""), sep=",", stringsAsFactors = F)
# Year pulled out of folder name
year <- as.numeric(str_extract(folders[z], "[0-9][0-9][0-9][0-9]"))
# STEP 1:  Keep citation cases that match with the year of the respective citation, e.g. 2013
if (length(year)==1){
cat("\n\nYou defined before that the year of the study is ", year,". Only cases are pulled out that contain that year.\n\n", sep = "")
} else {
cat("\n\n You probably didn't define 'study.data' because no year was found.\n\n", sep="")
}
citation.data <- citation.data[str_detect(citation.data$citation.case, as.character(year))==TRUE,]
# STEP 2:
# Clean leading dots .
citation.data$citation.case <- str_replace(citation.data$citation.case, "^. ", "")
# Clean trailing dots .
citation.data$citation.case <- str_replace(citation.data$citation.case, ".$", "")
write.table(citation.data, paste("./", folders[z], "/citation_cases_cleaned.csv", sep = ""), sep = ",")
cat("\n\n Cleaned citation data file saved under 'citation_data_cleaned.csv' in the corresponding study folder.\n\n")
}
}
clean_citation_cases()
library(citations)
library(devtools)
library(citations)
library(citations)
?substr
library(citations)
library(citations)
?get_wos_citations
?xpathSApply
library(XML)
?xpathSApply
library(citations)
R.version
library(citations)
?xmlValue
??xmlValue
??doc
library(citations)
library(citations)
XML::xpathSApply
?xpathSApply
library(citations)
library(citations)
??xmlValue
library(citations)
library(citations)
library(citations)
library(citations)
library(citations)
library(citations)
library(citations)
devtools::test()
library(testthat)
library(citations)
test_check("citations")
library(citations)
ls("package:citations")
library(citations)
install.packages("roxygen2")
install.packages("testhat")
install.packages("testthat")
library(citations)
setwd("C:\\Users\\pbauer\\Google Drive\\Packages\\citations - example")
library(XML)
library(stringr)
library(fulltext)
studies <- study_data(authors="Druckman, James N., Erik Peterson, and Rune Slothuus",
title = "How elite partisan polarization affects public opinion formation",
year="2013",
journal="American Political Science Review",
volume="107",
issue="1",
pages="57-79")
library(citations)
library(citations)
library(devtools)
install.packages("devtools")
library(citations)
setwd("C:\\Users\\pbauer\\Google Drive\\Packages\\citations - example")
library(citations)
studies <- study_data(authors="Druckman, James N., Erik Peterson, and Rune Slothuus",
title = "How elite partisan polarization affects public opinion formation",
year="2013",
journal="American Political Science Review",
volume="107",
issue="1",
pages="57-79")
setwd("C:\\Users\\pbauer\\Google Drive\\Packages\\citations - example")
count_wos_citations(wos.url = "https://apps.webofknowledge.com/full_record.do?product=WOS&search_mode=CitingArticles&qid=11&SID=T1K4ltqYAZBpobmxVZ5&page=1&doc=1")
count_wos_citations(wos.url = "https://apps.webofknowledge.com/full_record.do?product=WOS&search_mode=CitingArticles&qid=11&SID=T1K4ltqYAZBpobmxVZ5&page=1&doc=1")
library(XML)
library(stringr)
library(fulltext)
count_wos_citations(wos.url = "https://apps.webofknowledge.com/full_record.do?product=WOS&search_mode=CitingArticles&qid=11&SID=T1K4ltqYAZBpobmxVZ5&page=1&doc=1")
count_wos_citations(wos.url = "https://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=13&SID=T1K4ltqYAZBpobmxVZ5&page=1&doc=1")
get_wos_citations(wos.url = "https://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=13&SID=T1K4ltqYAZBpobmxVZ5&page=1&doc=1",
n.pages = 1)
get_wos_citations(wos.url = "https://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=13&SID=T1K4ltqYAZBpobmxVZ5&page=1&doc=1",
n.pages = 3,
folder = "Beck 1995")
wos.url = "https://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=13&SID=T1K4ltqYAZBpobmxVZ5&page=1&doc=1"
n.pages = 3
folder = "Beck 1995"
URL <- wos.url
cat("\nYou are using the following URL: ", paste(URL, sep = ""))
doc <- XML::htmlParse(URL) # , encoding="UTF-8" - ATTENTION UTF does not work on WINDOWS 7
records.max <- stringr::str_extract(stringr::str_replace(XML::xpathSApply(doc, "//*[@id='paginationForm']", fun = XML::xmlValue), "1", "")[1], "[0-9]+")
records.max
doc <- htmlParse(URL) # , encoding="UTF-8" - ATTENTION UTF does not work on WINDOWS 7
count_wos_citations(wos.url = "http://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=13&SID=T1K4ltqYAZBpobmxVZ5&page=1&doc=1")
count_wos_citations(wos.url = "http://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=13&SID=T1K4ltqYAZBpobmxVZ5&page=1&doc=1")
get_wos_citations(wos.url = "https://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=13&SID=T1K4ltqYAZBpobmxVZ5&page=1&doc=1",
n.pages = 3,
folder = "Beck 1995")
get_wos_citations(wos.url = "http://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=13&SID=T1K4ltqYAZBpobmxVZ5&page=1&doc=1",
n.pages = 3,
folder = "Beck 1995")
count_wos_citations(wos.url = "http://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=24&SID=T1K4ltqYAZBpobmxVZ5&page=1&doc=1")
URL <- wos.url
cat("\nYou are using the following URL: ", paste(URL, sep = ""))
wos.url = "http://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=13&SID=T1K4ltqYAZBpobmxVZ5&page=1&doc=1"
URL <- wos.url
cat("\nYou are using the following URL: ", paste(URL, sep = ""))
doc <- htmlParse(URL) # , encoding="UTF-8" - ATTENTION UTF does not work on WINDOWS 7
records.max <- stringr::str_extract(stringr::str_replace(XML::xpathSApply(doc, "//*[@id='paginationForm']", fun = XML::xmlValue), "1", "")[1], "[0-9]+")
records.max
doc
records.max <- stringr::str_extract(stringr::str_replace(XML::xpathSApply(doc, "//*[@id='paginationForm']", fun = XML::xmlValue), "1", "")[1], "[0-9]+")
records.max <- stringr::str_extract(stringr::str_replace(XML::xpathSApply(doc, "//*[@id='paginationForm']", fun = xmlValue), "1", "")[1], "[0-9]+")
records.max
stringr::str_extract(stringr::str_replace(XML::xpathSApply(doc, "//*[@id='paginationForm']", fun = XML::xmlValue), "1", "")[1], "[0-9]+")
stringr::str_extract(stringr::str_replace(XML::xpathSApply(doc, "//*[@id='paginationForm']", fun = XML::xmlValue), "1", "")[1], "[0-9]+")
XML::xpathSApply(doc, "//*[@id='paginationForm']", fun = XML::xmlValue)
stringr::str_replace(XML::xpathSApply(doc, "//*[@id='paginationForm']", fun = XML::xmlValue), "1", "")
stringr::str_replace(XML::xpathSApply(doc, "//*[@id='paginationForm']", fun = XML::xmlValue), "1", "")[1]
records.max <- stringr::str_extract(stringr::str_replace(XML::xpathSApply(doc, "//*[@id='paginationForm']", fun = XML::xmlValue), "1", "(?<!\S)(\d*\.?\d+|\d{1,3}(,\d{3})*(\.\d+)?)(?!\S)")[1], "")
records.max <- stringr::str_extract(stringr::str_replace(XML::xpathSApply(doc, "//*[@id='paginationForm']", fun = XML::xmlValue), "1", "")[1], "[0-9,]+")
records.max
records.max <- stringr::str_replace(XML::xpathSApply(doc, "//*[@id='paginationForm']", fun = XML::xmlValue), "1", "")[1]
records.max
records.max <- stringr::str_extract(records.max, "[0-9,]+")
records.max
records.max <- stringr::str_replace(records.max, ",", "")
records.max
library(citations)
count_wos_citations(wos.url = "http://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=24&SID=T1K4ltqYAZBpobmxVZ5&page=1&doc=1")
getwd()
get_wos_citations(wos.url = "http://apps.webofknowledge.com/full_record.do?product=UA&search_mode=CitingArticles&qid=13&SID=T1K4ltqYAZBpobmxVZ5&page=1&doc=1",
n.pages = 1567,
folder = "Beck 1995")
getwd()
gen_ris()
fetch_paperpiledocs(paperpile.directory = "C:\\Users\\pbauer\\Google Drive\\Paperpile\\")
library(citations)
fetch_paperpiledocs(paperpile.directory = "C:\\Users\\pbauer\\Google Drive\\Paperpile\\")
setwd("C:\\Users\\pbauer\\Google Drive\\Packages\\citations package example\\data")
fetch_paperpiledocs(paperpile.directory = "C:\\Users\\pbauer\\Google Drive\\Paperpile\\")
extract_text()
extract_text()
extract_text()
extract_text()
extract_text()
extract_text()
extract_text()
extract_text()
extract_text()
extract_text()
library(citations)
