{
    "contents" : "#' Converts and stores PDFs in folder as .txt files.\n#'\n#' @return Converts and stores PDFs in folder as .txt files.\n#' @param folder Name of folder within working directory in which the citing documents (PDFs) are located, e.g. \"Beck 1995\".\n#' @param number Number of PDFs you want to apply the function to. Default is \"all PDFs in folder\".\n\n\n\nextract_text <- function(folder, number=NULL) {\n\n# Add xpdf to the environmental variable PATH\n  # use 'Sys.getenv(\"PATH\")' to check path\n  Sys.setenv(PATH = paste(Sys.getenv(\"PATH\"), \";C:\\\\Program Files\\\\xpdf\\\\bin32\\\\\", sep=\"\")) # LAPTOP\n  Sys.setenv(PATH = paste(Sys.getenv(\"PATH\"), \";C:\\\\Program Files\\\\xpdf\\\\bin64\\\\\", sep=\"\"))\n\n# Identify and delete any .txt files present in folder\n  file.names <- dir(paste(\"./\", folder, sep = \"\"), pattern = \".txt\")\n  if(identical(file.names, character(0))==FALSE){\n    file.paths <- paste(paste(\"./\", folder,\"/\", sep = \"\"), file.names, sep=\"\")\n    file.remove(file.paths)\n  }\n\n\n\n# Identify names of PDF files in folder + their path\n  file.names <- dir(paste(\"./\", folder, sep = \"\"), pattern = \".pdf\")\n  file.paths <- paste(paste(\"./\", folder,\"/\", sep = \"\"), file.names, sep=\"\")\n\n# Count number of files in folder\n  n.docs <- length(file.paths)\n\n# Specify number of documents to assess by setting n.docs\n  if(!is.null(number)){n.docs <- number}\n\n\n\n\n    # Measure time\n      ptm <- proc.time()\n\n# Loop over .pdf files one by one (until document nr. \"number\" = n.docs)\n  for (i in 1:n.docs){  #\n    tryCatch(\n      { # Good PDFs\n\n        fulltext::ft_extract(file.paths[i], which = \"xpdf\")\n        cat(\"\\n Ok! \", file.paths[i], \"\\n\", sep=\"\")\n\n      },\n      error=function(cond)\n      { # Error PDFs (e.g. no text extraction)\n\n        # Give error message with path\n        message(paste(\"\\n PROBLEM! \\n\", file.paths[i]))\n\n        # Create folder for bad PDFs (if not present)\n        if(dir.exists(paste(\"./\", folder, \"/text extraction error/\", sep = \"\"))==F){\n          dir.create(paste(\"./\", folder, \"/text extraction error/\", sep = \"\"))}\n\n        # Copy bad PDFs to 'text extraction error' folder\n        file.copy(file.paths[i], paste(\"./\", folder, \"/text extraction error/\", file.names[i], sep = \"\"), overwrite = TRUE, recursive = FALSE,\n                  copy.mode = TRUE, copy.date = FALSE)\n\n        # Delete bad PDFs from documents folder\n        unlink(file.paths[i], force = T)\n\n        # Message\n        message(\"\\n\\nPDF copied to 'text extraction error' folder.\\n\")\n\n      },\n      warning=function(cond)\n      { # Warning PDFs\n\n        message(paste(\"\\n WARNING! \\n\", file.paths[i]))\n\n\n        # Create folder for bad PDFs (if not present)\n        if(dir.exists(paste(\"./\", folder, \"/text extraction error/\", sep = \"\"))==F){\n          dir.create(paste(\"./\", folder, \"/text extraction error/\", sep = \"\"))}\n\n        # Copy bad PDFs to error folder\n        file.copy(file.paths[i], paste(\"./\", folder, \"/text extraction error/\", file.names[i], sep = \"\"), overwrite = TRUE, recursive = FALSE,\n                  copy.mode = TRUE, copy.date = FALSE)\n\n        # Delete bad PDFs from documents folder\n        unlink(file.paths[i], force = T)\n        message(\"\\n\\n PDF copied to 'text extraction error' folder.\\n\")\n\n      },\n      finally={}\n\n      )}\n\n      # Measure time\n      time <- proc.time() - ptm\n\n  # Messages for user\n    cat(\"\\n\\n For the folder '\", folder, \"' text extraction too around \", as.numeric(time[3]), \" second(s) this is around \", round(as.numeric(time[3])/60,2), \" minutes.\\n\", sep = \"\")\n\n    cat(\"\\n\", n.docs, \" PDFs where just sequeezed to release their text in folder '\", folder, \"'!\\n\\n\", sep = \"\")\n\n    cat(length(dir(paste(\"./\", folder, \"/text extraction error\", sep=\"\"))),\n        \" PDF file(s) were problematic and copied to the 'text extraction error' folder.\\n\\n\" , sep = \"\")\n  }\n\n\n\n\n\n\n\n",
    "created" : 1457710615822.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "422342934",
    "id" : "41E0E348",
    "lastKnownWriteTime" : 1457647484,
    "path" : "C:/Users/pbauer/Google Drive/Packages/citations/R/extract_text.R",
    "project_path" : "R/extract_text.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}